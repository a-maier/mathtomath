/* This is the grammar for general mathematical formulas */
%{
#use Data::Dump;
#special symbols
my %special_symbols=(
	'alpha' => 'alpha',
	'beta' => 'beta',
	'gamma' => 'gamma',
	'delta' => 'delta',
	'epsilon' => 'epsilon',
	'zeta' => 'zeta',
	'eta' => 'eta',
	'theta' => 'theta',
	'iota' => 'iota',
	'kappa' => 'kappa',
	'lambda' => 'lambda',
	'mu' => 'mu',
	'nu' => 'nu',
	'xi' => 'xi',
	'omicron' => 'omicron',
	'pi' => 'pi',
	'rho' => 'rho',
	'sigma' => 'sigma',
	'tau' => 'tau',
	'upsilon' => 'upsilon',
	'phi' => 'phi',
	'chi' => 'chi',
	'psi' => 'psi',
	'omega' => 'omega',
	'Alpha' => 'Alpha',
	'Beta' => 'Beta',
	'Gamma' => 'Gamma',
	'Delta' => 'Delta',
	'Epsilon' => 'Epsilon',
	'Zeta' => 'Zeta',
	'Eta' => 'Eta',
	'Theta' => 'Theta',
	'Iota' => 'Iota',
	'Kappa' => 'Kappa',
	'Lambda' => 'Lambda',
	'Mu' => 'Mu',
	'Nu' => 'Nu',
	'Xi' => 'Xi',
	'Omicron' => 'Omicron',
	'Pi' => 'Pi',
	'Rho' => 'Rho',
	'Sigma' => 'Sigma',
	'Tau' => 'Tau',
	'Upsilon' => 'Upsilon',
	'Phi' => 'Phi',
	'Chi' => 'Chi',
	'Psi' => 'Psi',
	'Omega' => 'Omega',
	'i' => 'i',
	'e' => 'e'
);

%}

%token NUMBER
%token SYMBOL

%left ';'
%left ','
%right '=' 
%left '>' '<' ID NE GE LE
%left '+' '-'
%left '*' '/'
%left '^'
%nonassoc '.'
%nonassoc WILDCARD
%%

input: /* empty */
       | term	
;

term:	symbol
	| number
	| relation 
	| operation
	| bracket
	| function | list
	| index
	| wildcard
;

symbol:	SYMBOL	{
		my $symbol=$_[1];
		#special characters
		if(defined $special_symbols{$symbol}){
			   $symbol="**$special_symbols{$symbol}**";		
		}
		Expression->new(name =>$symbol,is => 'symbol')
		}
;


number: NUMBER 	{Expression->new(name =>$_[1],is => 'number')}
;

relation:	term '=' term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term ID term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term NE term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '>' term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term GE term	{Expression->new(name =>'>=',is => 'operator',args => [$_[1],$_[3]])}
		| term '<' term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term LE term	{Expression->new(name =>'<=',is => 'operator',args => [$_[1],$_[3]])}
;


operation:	'+' term			{$_[2]}
		| term '+' term 		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| '-' term			{Expression->new(name =>$_[1],is => 'operator',args => [$_[2]])}
		| term ';' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '-' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '*' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		|  number bracket %prec '*'	{Expression->new(name =>'*',is => 'operator',args => [$_[1],$_[2]])} 
		|  number symbol %prec '*' 	{Expression->new(name =>'*',is => 'operator',args => [$_[1],$_[2]])} 
		|  number function %prec '*' 	{Expression->new(name =>'*',is => 'operator',args => [$_[1],$_[2]])} 
		| term '/' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '^' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '.' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
;

bracket: '(' term ')'	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[2]])}
;

function:	symbol '(' term ')'		{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
		| wildcard '(' term ')'		{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
	  	| symbol '(' sequence ')'	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
	  	| wildcard '(' sequence ')'	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
#  also support currying
	  	| function '(' term ')' 	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
;

list:		'{' '}'				{Expression->new(name =>['{','}'],is => 'bracket')}
		| '{' term '}'			{Expression->new(name =>['{','}'],is => 'bracket',args => [$_[2]])}
		| '{' sequence '}'		{Expression->new(name =>['{','}'],is => 'bracket',args => [$_[2]])}
;

sequence: term ',' term {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
	    | term ',' sequence {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
;

index: symbol '[' term ']' {Expression->new(name =>['[',']'],is => 'bracket',args => [$_[1],$_[3]])}
       | symbol '[' sequence ']' {Expression->new(name =>['[',']'],is => 'bracket',args => [$_[1],$_[3]])}
       | list '[' term ']' {Expression->new(name =>['[',']'],is => 'bracket',args => [$_[1],$_[3]])}
       | list '[' sequence ']' {Expression->new(name =>['[',']'],is => 'bracket',args => [$_[1],$_[3]])}
;
wildcard: symbol WILDCARD {Expression->new(name => $_[2],is => 'operator',args => [$_[1]])}
;

%%

sub _error {
    if(exists $_[0]->YYData->{ERRMSG}) {
	print $_[0]->YYData->{ERRMSG};
        delete $_[0]->YYData->{ERRMSG};
        return;
    };	
    print "Syntax error.\n";
}

sub _lexer {
    my $parser =shift;
    
    return('',undef) unless $parser->YYData->{INPUT};

    for ($parser->YYData->{INPUT}) {
    	# first check for reals, then for integers
	return('NUMBER',$1) if s/^(\d*\.\d+|\d+\.\d*)//; 
	return('NUMBER',$1) if s/^(\d+)//; 
	return('SYMBOL',$1) if s/^([[:alpha:]]\w*)//;
	return('ID',$1) if s/^(==)//;
	return('NE',$1) if s/^(!=)//;
	return('LE',$1) if s/^(<=|=>)//;
	return('GE',$1) if s/^(=>|<=)//;
	return('WILDCARD',$1) if s/^(\?{1,3})//;
        return($1,$1) if s/^(.)//s;
    }
}

sub parse {
    my $self=shift;
    my $data=shift;
    for ($data){
	s/\s+//g;
	$self->YYData->{INPUT} = $_
    }
    $self->YYParse( yylex => \&_lexer, yyerror => \&_error );
}

