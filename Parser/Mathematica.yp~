/* This is the grammar for Mathematica */
/*
TODO: 
      -comments: (* *)
      -numeric precision, different bases
      - improve support for named characters
*/
%{
#use Data::Dump;
my %spec_symbols=(
   'Pi' => 'pi',
   'E' => 'e',
   'I' => 'i'
);
%}

%token NUMBER
%token SYMBOL
%token STRING

%right FBOX ';'	#FBOX is \`
%left PUT 	# >>  >>>
#%right FUN TUNSET UNSET TSETDEL TSET UPSETDEL UPSET SETDEL SET 
%right SET # =. ^:= ^= := = 
#%right THEREFORE %left BECAUSE
#%left VSEP # |
%left POST # //
%left COLON # expr1:expr2
%nonassoc '&'
%right OSET # /= *= -= +=
%left REPL  # /. //.
%right RULE # :> ->
%left COND # /;
%left CAT # ~~
%nonassoc ':' # pattern:expr or symbol:expr
%left '|'
%nonassoc REP # .. ...
#%right SUCHTHAT
#%left LEFTTEE DOUBLELEFTTEE %right RIGHTTEE DOUBLERIGHTTEE
#%right IMPLIES
#%left EQUIVALENT
#%left NOR OR
%left OR # ||
#%left XNOR XOR
#%left NAND AND
%left  AND # &&
%right '!'
#%right FORALL EXISTS NEXISTS
#%left SETCMP
%left SAME # === =!=
#%??? ORDERINGOPERATOR
%left CMP # <= < >= > != == 
%left SPAN # ;;
#%left UNION
#%left INTERSECTION
%left '+' '-' # PLUSMINUS MINUSPLUS
#%right SUM
#%left CIRCLEPLUS CIRCLEMINUS
#%left CAP CUP
#%left COPRODUCT
#%left VERTICALTILDE
#%right PRODUCT
#%left STAR
%left '×' '*' # ' '
#%left CENTERDOT
#%left CIRCLETIMES
#%left VEE
#%left WEDGE
#%left DIAMOND
%left '\\'
%left DIVIDE # \/ /
%nonassoc UPLUSMINUS # - +, also unary +- -+
%left '.'
#%left CROSS
%left NCMULTIPLY # **
#%left CIRCLEDOT
#%right SMALLCIRCLE SQUARE
#%right DIFFERENCEDELTA DISCRETERATIO DEL D
#%right INTEGRATE
%right SQRT # \@ \@expr1\%expr2
# EXP is formally not correct here, but I hope it is not ambiguos
%right '^' EXP # ^ *^ #expr1\^expr2\%expr3 is (expr1_expr3)^expr2
%left STRINGJOIN # <>
%left '\''
%left CONJUGATE # TRANSPOSE CONJUGATETRANSPOSE TRANSPOSECONJUGATE # *
%nonassoc FAC # ! !!
%right MAPPLY # @@ @@@ /@ /@@
%left '~' # infix function
%right '@' # prefix function
%nonassoc PREINC # ++ --
%nonassoc INC # ++ -- also: \*
%left PARTO PARTC '[' ']'# [[]] []
%nonassoc '?'
#% \!
%right SUBSCRIPT # \_ also expr1\_expr2 \% expr3
%right OVERSCRIPT UNDERSCRIPT # UNDEROVERSCRIPT1 UNDEROVERSCRIPT2 # \& \+ expr1\+expr2\%expr3 expr1\&expr3\%expr2
%nonassoc GET # <<
#	   strange input forms?
%left MESSAGENAME # ::
# %nonassoc PIECEWISE
#this is not mathematica default, but I guess we need it
%nonassoc '´'  
%nonassoc PATTERN # _ __ ___ 



%%

input: /* empty */
       | term
;

term:	symbol
	| number
	| string
	| assignment
	| relation 
	| operation
	| bracket
	| function
	| index
	| wildcard
	| list
;

symbol:	SYMBOL	{
		my $symbol=$_[1];
		#special characters
		if(defined $spec_symbols{$symbol}){
			   $symbol=$spec_symbols{$symbol};		
		}
		elsif($symbol =~ /^\\\[(.*)\]$/){
			$symbol=lc $1;
			$symbol =~ s/capital([a-z])/uc($1)/e;
		}
		Expression->new(name =>$symbol,is => 'symbol')
		}
;

number: NUMBER 	{Expression->new(name =>$_[1],is => 'number')}
	| number '´' number {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
;
string: STRING {Expression->new(name =>$_[1],is => 'string')}
;

wildcard: symbol PATTERN {
	 my %wildcard=('_' => '?', '___' => '??', '__' => '???');
	 Expression->new(name =>$wildcard{$_[1]},is => 'operator',args => [$_[1]])
	 }
;
assignment: 	term SET term	     {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term OSET term     {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term PUT term	     {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| symbol ':' term    {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| pattern ':' term   {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term GET term	     {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
;
 
relation:	term SAME term     {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
 		| term COND term     {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
 		| term CMP term	     {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
;


operation:	term ';' term		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term ';'		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1]])}
		| term '&' term		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term REPL term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term RULE term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term CAT term 	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term SPAN term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '+' term 		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '-' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '×' term			{Expression->new(name =>'*',is => 'operator',args => [$_[1],$_[3]])}
		| term '*' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
#this rule is probably correct, but really dangerous		
#      	      	| term term			{Expression->new(name =>'*',is => 'operator',args => [$_[1],$_[2]])}
		| term '\\' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term DIVIDE term		{Expression->new(name =>'/',is => 'operator',args => [$_[1],$_[3]])}
		| '+' term %prec UPLUSMINUS	{$_[2]}
		| '-' term %prec UPLUSMINUS	{Expression->new(name =>$_[1],is => 'operator',args => [$_[2]])}
		| term '.' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term NCMULTIPLY term		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| SQRT term			{
		       				my $sqrt=Expression->new(name =>'Sqrt',is => 'symbol');
		       				Expression->new(name =>['(',')'],is => 'bracket',args => [$sqrt,$_[2]])
						}
#		| SQRT term '\%' term	%prec SRQT	{}
		| term '^' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
#		| term '^' term	'\%' term	{}
		| term STRINGJOIN term		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '\''	  		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1]])}
		| term '*'	%prec CONJUGATE {
		       		      		my $conj=Expression->new(name =>'Conjugate',is => 'symbol');	
		       		      		Expression->new(name =>['(',')'],is => 'bracket',args => [$conj,$_[1]])
						}
		| term FAC 	      		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1]])}
		| term MAPPLY term		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term INC	    		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1]])}
		| INC term	%prec PREINC	{Expression->new(name =>$_[1],is => 'operator',args => [$_[2]])}
		| term '?' term	      		{
		       		      		my $ptest=Expression->new(name =>'PatternTest',is => 'symbol');	
		       	   	    		my $args=Expression->new(name =>',',is => 'operator',args =>[$_[1],$_[3]]);
		       		      		Expression->new(name =>['(',')'],is => 'bracket',args => [$ptest,$args])
						}
		| term SUBSCRIPT term		{
		       		      		my $script=Expression->new(name =>'Subscript',is => 'symbol');	
		       	   	    		my $args=Expression->new(name =>',',is => 'operator',args =>[$_[1],$_[3]]);
		       		      		Expression->new(name =>['(',')'],is => 'bracket',args => [$script,$args])
		  		       		}
#		| term SUBSCRIPT term '\%' term	{}
		| term UNDERSCRIPT term		{
		       		      		my $script=Expression->new(name =>'Overscript',is => 'symbol');	
		       	   	    		my $args=Expression->new(name =>',',is => 'operator',args =>[$_[1],$_[3]]);
		       		      		Expression->new(name =>['(',')'],is => 'bracket',args => [$script,$args])
		  		       		}
		| term OVERSCRIPT term		{
		       		      		my $script=Expression->new(name =>'Underscript',is => 'symbol');	
		       	   	    		my $args=Expression->new(name =>',',is => 'operator',args =>[$_[1],$_[3]]);
		       		      		Expression->new(name =>['(',')'],is => 'bracket',args => [$script,$args])
		  		       		}
		| term MESSAGENAME string	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '|' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term REP 			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1]])}
		| term OR term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term AND term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| '!' term			{Expression->new(name =>$_[1],is => 'operator',args => [$_[2]])}
		| number EXP term		{
		  	     			my $base=Expression->new(name =>'10',is => 'number');
						my $pow=Expression->new(name =>'^',is => 'operator',args => [$base,$_[3]]);
		  	     			Expression->new(name =>'*',is => 'operator',args => [$_[1],$pow])
						}
;

bracket: '(' term ')'	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[2]])}
	 | term PARTO term PARTC {Expression->new(name =>['[',']'],is => 'bracket',args => [$_[1],$_[3]])}
	 | term PARTO sequence PARTC {Expression->new(name =>['[',']'],is => 'bracket',args => [$_[1],$_[3]])}
;

function:	term '[' term ']'		{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
		| term '[' sequence ']' 	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
		| term POST term    		{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[3],$_[1]])}
	 	| term '@' term	    		{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
		| term '~' term '~' term	{
		        	   	    		my $args=Expression->new(name =>',',is => 'operator',args =>[$_[1],$_[5]]);
		        	   	    		Expression->new(name =>['(',')'],is => 'bracket',args =>[$_[3],$args])
		 				}
;

list:		'{' '}'				{Expression->new(name =>['{','}'],is => 'bracket')}
		| '{' term '}'			{Expression->new(name =>['{','}'],is => 'bracket',args => [$_[2]])}
		| '{' sequence '}'		{Expression->new(name =>['{','}'],is => 'bracket',args => [$_[2]])}
;

sequence: term ',' term {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
	    | term ',' sequence {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
;


%%

sub _error {
    if(exists $_[0]->YYData->{ERRMSG}) {
	print $_[0]->YYData->{ERRMSG};
        delete $_[0]->YYData->{ERRMSG};
        return;
    };	
    print "Syntax error.\n";
}
sub _lexer {
    my $parser =shift;
    
    return('',undef) unless $parser->YYData->{INPUT};

    for ($parser->YYData->{INPUT}) {
    	# first check for reals, then for integers
	return('NUMBER',$1) if s/^(\d*\.\d+|\d+\.\d*)//; 
	return('NUMBER',$1) if s/^(\d+)//; 
	return('SYMBOL',$1) if s/^(([[:alpha:]]|\$)([[:alnum:]]|\$)*)//;
	#named characters
	return('SYMBOL',$1) if s/^(\\\[.*?\])//;
	return('STRING',$1) if s/^(".*?[^\\]")//;
	return('FBOX',$1) if s/^(\\´)//;
	return('PUT',$1) if s/^(>{2,3})//;
	return('SET',$1) if s/^(=\.|\^?:?=)//;
	return('POST',$1) if s$^(//)$$;
	return('OSET',$1) if s/^([\/\*\+-]=)//;
	return('REPL',$1) if s$^(/?/\.)$$;
	return('RULE',$1) if s/^([:-]>)//;
	return('COND',$1) if s/^(\/;)//;
	return('CAT',$1) if s/^(~~)//;
	return('REP',$1) if s/^(\.{2,3})//;
	return('OR',$1) if s/^(\|\|)//;
	return('AND',$1) if s/^(&&)//;
	return('CMP',$1) if s/^([<>]=?|[!=]=)//;
	return('SPAN',$1) if s/^(;;)//;
	return('DIVIDE',$1) if s$^(\\?/)$$;
	return('NCMULTIPLY',$1) if s/^(\*\*)//;
	return('SQRT',$1) if s/^(\\@)//;
	return('STRINGJOIN',$1) if s/^(<>)//;
	return('FAC',$1) if s/^(!!?)//;
	return('MAPPLY',$1) if s/^([\/@]@@?)//;
	return('INC',$1) if s/^(\+\+|--)//;
	return('PARTO',$1) if s/^(\[\[)//;
	return('PARTC',$1) if s/^(\]\])//;
	return('SUBSCRIPT',$1) if s/^(\\_)//;
	return('OVERSCRIPT',$1) if s/^(\\&)//;
	return('UNDERSCRIPT',$1) if s/^(\\\+)//;
	return('GET',$1) if s/^(<<)//;
	return('MESSAGENAME',$1) if s/^(::)//;
	return('PATTERN',$1) if s/^(_{1,3})//;
	return('EXP',$1) if s/^(\*\^)//;
        return($1,$1) if s/^(.)//s;
    }
}

sub parse {
    my $self=shift;
    my $data=shift;
    for ($data){
	s/\s+//g;
	$self->YYData->{INPUT} = $_
    }
    $self->YYParse( yylex => \&_lexer, yyerror => \&_error );
}

