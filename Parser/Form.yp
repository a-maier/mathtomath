/* This is the grammar for FORM */
%{
use Data::Dump;
    use feature "state";
    my %special_symbols=();
%}

%token NUMBER
%token SYMBOL
%token ELLIPSIS

%left ';'
%left ','
%nonassoc '='
%left '+' '-'
%left '*' '/'
%left '^'
%nonassoc '.'
%nonassoc UN
%%

input: /* empty */
       | term	
;

term:	symbol
	| number
	| ellipsis
	| relation 
	| operation
	| bracket
	| function | list
	| index
	| wildcard
;

symbol:	SYMBOL	{
		my $symbol=$_[1];
		#special characters
		if(defined $special_symbols{$symbol}){
			   $symbol="**$special_symbols{$symbol}**";		
		}
		Expression->new(name =>$symbol,is => 'symbol')
		}
;


number: NUMBER 	{Expression->new(name =>$_[1],is => 'number')}
;

ellipsis: ELLIPSIS 	{Expression->new(name =>$_[1],is => 'symbol')}
;

relation:	term '=' term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
;


operation:	'+' term			{$_[2]}
		| term '+' term 		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| '-' term	%prec UN	{Expression->new(name =>$_[1],is => 'operator',args => [$_[2]])}
		| term '-' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '*' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '/' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '^' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '.' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term ';' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term ';' 			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1]])}
;

bracket: '(' term ')'	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[2]])}
;

function:	symbol '(' term ')'		{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
		| wildcard '(' term ')'		{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
	  	| symbol '(' sequence ')'	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
	  	| wildcard '(' sequence ')'	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
;

list:		'{' '}'				{Expression->new(name =>['{','}'],is => 'bracket')}
		| '{' term '}'			{Expression->new(name =>['{','}'],is => 'bracket',args => [$_[2]])}
		| '{' sequence '}'		{Expression->new(name =>['{','}'],is => 'bracket',args => [$_[2]])}
;

sequence: term ',' term {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
	    | term ',' sequence {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
;

index: symbol '[' term ']' {Expression->new(name =>['[',']'],is => 'bracket',args => [$_[1],$_[3]])}
       | list '[' term ']' {Expression->new(name =>['[',']'],is => 'bracket',args => [$_[1],$_[3]])}
;
wildcard: symbol '?' {Expression->new(name => $_[2],is => 'operator',args => [$_[1]])}
	  | '?' symbol  {Expression->new(name => '??',is => 'operator',args => [$_[2]])}
	  | wildcard list {die "TODO: wildcard list"}
	  | wildcard '!' list {die "TODO: wildcard '!' list"}
	  | wildcard index {die "TODO: wildcard index"}
;

%%

    sub _error {
	if(exists $_[0]->YYData->{ERRMSG}) {
	    print $_[0]->YYData->{ERRMSG};
	    delete $_[0]->YYData->{ERRMSG};
	    return;
	};	
	#dd($_[0]->YYData->{INPUT});
	print "Syntax error.\n";
}

sub _lexer {
    my $parser =shift;
    #determines whether an opening square bracket indicates
    # a symbol or an index 
    state $symbol_mode=1;

    return('',undef) unless $parser->YYData->{INPUT};

    for ($parser->YYData->{INPUT}) {
	#special symbols of the type [...]
    	if($symbol_mode and s/^\[//){
	    my $sym='[';
	    my $brackets=1;
	    while($brackets){
		$_ or die "Symbol '[$sym' has no terminating ']'";
		$sym.=$1 if s/^([^\[\]]+)//;
		if (s/^\[//){
		    ++$brackets;
		    $sym.='['
		}
		if (s/^\]//){
		    --$brackets;
		    $sym.=']'
		}
	    }
	    $symbol_mode=0;
	    return('SYMBOL',$sym)
	}
	if (s/^(\$?[[:alpha:]][[:alnum:]]*_?)//){
	    $symbol_mode=0;
	    return('SYMBOL',$1)
	} 
	if (s/^(\.{3})//){
	    $symbol_mode=0;
	    return('ELLIPSIS',$1)
	} 

	if(s/^(\})//){
	    $symbol_mode=0;
	    return('}','}')
	}
	$symbol_mode=1;		
	return('NUMBER',$1) if s/^(\d+)//; 
        return($1,$1) if s/^(.)//s;
    }
}

sub parse {
    my $self=shift;
    my $data=shift;
    for ($data){
	s/\s+//g;
	$self->YYData->{INPUT} = $_
    }
    $self->YYParse( yylex => \&_lexer, yyerror => \&_error );
}

