/* This is the grammar for general mathematical formulas */
%{
#use Data::Dump;
use feature qw(state say);
#special symbols
my %special_symbols=(
	'\alpha' => 'alpha',
	'\beta' => 'beta',
	'\gamma' => 'gamma',
	'\delta' => 'delta',
	'\epsilon' => 'epsilon',
	'\zeta' => 'zeta',
	'\eta' => 'eta',
	'\theta' => 'theta',
	'\iota' => 'iota',
	'\kappa' => 'kappa',
	'\lambda' => 'lambda',
	'\mu' => 'mu',
	'\nu' => 'nu',
	'\xi' => 'xi',
	'\omicron' => 'omicron',
	'\pi' => 'pi',
	'\rho' => 'rho',
	'\sigma' => 'sigma',
	'\tau' => 'tau',
	'\upsilon' => 'upsilon',
	'\phi' => 'phi',
	'\chi' => 'chi',
	'\psi' => 'psi',
	'\omega' => 'omega',
	'\Alpha' => 'Alpha',
	'\Beta' => 'Beta',
	'\Gamma' => 'Gamma',
	'\Delta' => 'Delta',
	'\Epsilon' => 'Epsilon',
	'\Zeta' => 'Zeta',
	'\Eta' => 'Eta',
	'\Theta' => 'Theta',
	'\Iota' => 'Iota',
	'\Kappa' => 'Kappa',
	'\Lambda' => 'Lambda',
	'\Mu' => 'Mu',
	'\Nu' => 'Nu',
	'\Xi' => 'Xi',
	'\Omicron' => 'Omicron',
	'\Pi' => 'Pi',
	'\Rho' => 'Rho',
	'\Sigma' => 'Sigma',
	'\Tau' => 'Tau',
	'\Upsilon' => 'Upsilon',
	'\Phi' => 'Phi',
	'\Chi' => 'Chi',
	'\Psi' => 'Psi',
	'\Omega' => 'Omega',
	'\log' => 'log',
	'\sin' => 'sin',
	'\cos' => 'cos',
	'\tan' => 'tan'
);

%}

%token DIGIT
%token ALPHA
%token CMD
%token CBO # \{
%token CBC # \}

%nonassoc OVER
%left ','
%left '&'
%left LINEBREAK # \\
%left '=' '>' '<' ID NE GE LE
%left '+' '-'
%left MULTI '/'
%nonassoc '.'
%nonassoc '^' '_'
%left JOIN
%left FRAC
%%

input: /* empty */
       | term	
;

term:	number {Expression->new(name =>$_[1],is => 'number')}
	| symbol {Expression->new(name =>$_[1],is => 'symbol')}
	| cmd
	| operation
	| relation
	| function
	| bracket
	| matrix
	| align
;


number: DIGIT
	| number DIGIT %prec JOIN {$_[1].$_[2]}
	| number '.' %prec JOIN {$_[1].'.'}
;

symbol: ALPHA
	| symbol ALPHA %prec JOIN {$_[1].$_[2]}
;

cmd: CMD {Expression->new(name =>$_[1],is => 'symbol')}
;

atom: DIGIT {Expression->new(name =>$_[1],is => 'number')}
      | ALPHA {Expression->new(name =>$_[1],is => 'symbol')}
      | cmd
;


argument: atom 
	  | '{' term '}' {$_[2]}
;

operation: FRAC argument argument	{Expression->new(name =>'/',is => 'operator',args => [$_[2],$_[3]])}
	   |     term OVER term 	{Expression->new(name =>'/',is => 'operator',args => [$_[1],$_[3]])}
	   | '{' term OVER term '}' 	{Expression->new(name =>'/',is => 'operator',args => [$_[2],$_[4]])}
	   | term '/' term  		{Expression->new(name =>'/',is => 'operator',args => [$_[1],$_[3]])}
	   | term MULTI term  		{Expression->new(name =>'*',is => 'operator',args => [$_[1],$_[3]])}
	   | '+' term			{$_[2]}
	   | term '+' term 		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
	   | '-' term			{Expression->new(name =>$_[1],is => 'operator',args => [$_[2]])}
	   | term '-' term		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
	   | term '^' argument		{Expression->new(name =>'^',is => 'operator',args => [$_[1],$_[3]])}
	   | term '_' argument		{
	     	      			my $sym=Expression->new(name =>'**subscript**',is => 'symbol');
					my $args=Expression->new(name =>',',is => 'operator',args=>[$_[1],$_[3]]);
	     	      			Expression->new(name => ['(',')'],is => 'bracket',args => [$sym,$args])
					}
	   |  number bracket %prec MULTI	{
	      	     	     	   		my $num=Expression->new(name =>$_[1],is => 'number'); 
	      	     	     	   		Expression->new(name =>'*',is => 'operator',args => [$num,$_[2]])} 
	   |  number symbol %prec MULTI 	{
	      	     	     	   		my $num=Expression->new(name =>$_[1],is => 'number'); 
	      	     	    	  		my $sym=Expression->new(name =>$_[2],is => 'symbol');
	      	     	    	  		Expression->new(name =>'*',is => 'operator',args => [$num,$sym])
						} 
	   |  number cmd %prec MULTI 		{
	      	     	     	   		my $num=Expression->new(name =>$_[1],is => 'number'); 
						Expression->new(name =>'*',is => 'operator',args => [$num,$_[2]])
						} 
	   |  number function %prec MULTI 	{
	      	     	     	   		my $num=Expression->new(name =>$_[1],is => 'number'); 
						Expression->new(name =>'*',is => 'operator',args => [$num,$_[2]])
						} 
	   | sequence	      	    		{$_[1]->{name}=';';$_[1]} 
# 	   | term '.' term		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])} 
#	   | term term %prec MULTI  {Expression->new(name =>'*',is => 'operator',args => [$_[1],$_[2]])}
;

relation:	term '=' term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term ID term	{Expression->new(name =>"==",is => 'operator',args => [$_[1],$_[3]])}
		| term NE term	{Expression->new(name =>"!=",is => 'operator',args => [$_[1],$_[3]])}
		| term '>' term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term GE term	{Expression->new(name =>'>=',is => 'operator',args => [$_[1],$_[3]])}
		| term '<' term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term LE term	{Expression->new(name =>'<=',is => 'operator',args => [$_[1],$_[3]])}
;

function:	symbol '(' term ')'		{
		   	      	      	 	my $sym=Expression->new(name =>$_[1],is => 'symbol');
    	   					Expression->new(name =>['(',')'],is => 'bracket',args => [$sym,$_[3]])
						}
		| cmd '(' term ')'		{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
#  also support currying
	  	| function '(' term ')' 	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
;

bracket:	CBO CBC				{Expression->new(name =>['{','}'],is => 'bracket')}
		| CBO term CBC			{Expression->new(name =>['{','}'],is => 'bracket',args => [$_[2]])}
		| '(' term ')'			{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[2]])}
		| '[' term ']'			{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[2]])}
;

sequence: term ',' term {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
 ;
matrix: 	BEGMATRIX table ENDMATRIX	{Expression->new(name =>['{','}'],is => 'bracket',args =>[$_[2]])}
;

table: row
       | row LINEBREAK row	{
       	     	       		my @rows;
				$rows[0]=Expression->new(name =>['{','}'],is => 'bracket',args =>[$_[1]]);
				$rows[1]=Expression->new(name =>['{','}'],is => 'bracket',args =>[$_[3]]);
				Expression->new(name =>',',is => 'operator',args =>\@rows)
				}
;
row:  term
      | row '&' term	{Expression->new(name =>',',is => 'operator',args =>[$_[1],$_[3]])}
;


%%

sub _error {
    if(exists $_[0]->YYData->{ERRMSG}) {
	print $_[0]->YYData->{ERRMSG};
        delete $_[0]->YYData->{ERRMSG};
        return;
    };	
    print "Syntax error.\n";
}

sub _lexer {
    state $in_matrix_env=0;
    my $parser =shift;
    
    return('',undef) unless $parser->YYData->{INPUT};
    for ($parser->YYData->{INPUT}) {
    	#dirty hack here: the parser must never return '&' or '\\'
    	# unless we are in a matrix environment
	say;
        s/^(&|\\\\)+// unless($in_matrix_env);
	say;
	return('DIGIT',$1) if s/^(\d)//; 
	return('ALPHA',$1) if s/^([[:alpha:]])//;
	return('FRAC',$1) if s/^(\\(d|t)?frac)//;
	return('OVER',$1) if s/^(\\over)//;
	return('MULTI',$1) if s/^(\*|\\?(\*|times|cdot))//;
	return('GE',$1) if s/^(\\geq)//;
	return('LE',$1) if s/^(\\leq)//;
	return('NE',$1) if s/^(\\neq)//;
	return('ID',$1) if s/^(\\equiv)//;
	return('CBO',$1) if s/^(\\\{)//;
	return('CBC',$1) if s/^(\\\})//;
	if(s/^(\\begin\{(array|tabular|(p|b|B|v|V|small)?matrix)\})//){
		++$in_matrix_env;
		return('BEGMATRIX',$1) 
		}
	if(s/^(\\end\{(array|tabular|(p|b|B|v|V|small)?matrix)\})//){
		--$in_matrix_env>-1 or die "$1 closes unopened matrix environment";
		return('ENDMATRIX',$1) ;
	   	}
	return('LINEBREAK',$1) if s/^(\\\\)//;
	return('CMD',$1) if s/^(\\[[:alpha:]]+)//;
        return($1,$1) if s/^(.)//s;
    }
}

sub parse {
    my $self=shift;
    my $data=shift;
    for ($data){
    	#remove whitespace (is this wise?)
	#and formating
	s/([^\\]|^)\\( |[,!;]|([bB]igg?(l|r)?|[lL]arge|[hH]uge|text|it|sl|bf))/$1/g;
	s/\s+//g;
	$self->YYData->{INPUT} = $_
    }
    $self->YYParse( yylex => \&_lexer, yyerror => \&_error );
}

