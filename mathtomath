#!/usr/bin/perl
# - input hinting (please enter ...)
# - run time including modules properly?
# - heuristic determination of input format (keep dreaming...)
# - custom options
# - fix multiple output formats
# - tests
use 5.10.1;
use warnings;
use strict;
use Data::Dump;
use Expression;
use Getopt::Long;
use Printer::Printer;

my $version;
my $version_number=0.0;

my $help;
my $help_text='TODO';
my $tree;

my $verbose;
my $strict;

my $in_format;
my @out_formats=();

sub get_input_formats;

GetOptions( 'informat|if=s' => \$in_format,
	    'outformats|of=s' => \@out_formats,
	    'strict!' => \$strict,
	    'verbose!'=> \$verbose,
	    'help|?'=> \$help,
	    'version'=> \$version
    );
@out_formats=('Generic') unless @out_formats;
@out_formats=(split /,/,join(',',@out_formats));
@out_formats = map {$_.='_out';ucfirst} @out_formats;
$in_format=ucfirst $in_format if $in_format;

if($version){
    say 'mathtomath version $version_number';
    exit;
}

if($help){
    say $help_text;
    exit;
}

# we decide on our formats at run time,
# so we require require and don't use use
foreach my $out_format (@out_formats){
    eval(require "Printer/$out_format.pm");
}

{
    local $/=undef;
    $_=<>;
}

#parse syntax tree
if($in_format){
    eval(require "Parser/$in_format.pm" );
    my $parser=$in_format->new;
    say "Parsing $in_format expression" if $verbose;
    $tree=$parser->parse($_) or exit(1);
}
else{
    #no input format is given, try all possibilities
    say "Trying to guess input format" if $verbose;
    my @formats=get_input_formats;
    my $expression=$_;
    foreach my $in_format (@formats){
	eval(require "Parser/$in_format.pm" );
	my $parser=$in_format->new;
	#as soon as we can parse the input successfully in one format
	# we claim to have won
	if ($tree=$parser->parse($expression)) {
	    say "Input format: $in_format" if $verbose;
	    last;
	}
    }
    $tree or die "No suitable input format found for expression"
}

#create output in the desired format
foreach my $out_format (@out_formats){
    dd $tree;
    my $printer=${out_format}->new;
    my $out_str=$printer->to_string($tree);
    say $out_str;
}

sub get_input_formats{
    opendir(my $handle,'Parser') or die "Failed to access directory 'Parser': $!";
    my @format_files = grep {s/\.pm$//} (grep {!/^Generic\.pm$/} readdir($handle));
    #make sure Generic format is tried first
    unshift(@format_files,'Generic');
    closedir $handle;
    return @format_files;
}
