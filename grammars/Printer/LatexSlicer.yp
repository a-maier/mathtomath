/* Grammar for line breaks in LaTeX */
%{
=head1 NAME

Math::ToMath::Printer::LatexSlicer - Insert line breaks into LaTeX output

=cut

use Data::Dump;
use 5.10.1;
use strict;
use warnings;

=head1 SYNOPSIS

 use Math::ToMath::Printer::LatexSlicer;

 my $slicer=Math::ToMath::Printer::LatexSlicer->new();
 $slicer->init(%options);
 $slicer->slice($LaTeX_str);


=head1 DESCRIPTION

Math::ToMath::Printer::LatexSlicer objects are used by Math::ToMath::Printer::Latex to insert line breaks into the LaTeX output. They offer the following methods:

=over 2

=item B<new>

Create a new object

=item B<init>

Set options. See the next section for a list of possible option keys.

=item B<slice>

Insert line breaks into the given string according to how the option values are set.

=back

=head1 OPTIONS

Options determine where line breaks will be inserted and can be set via the B<init> method.

=over 2

=item B<line_length>

The minimal number of characters a line should have before line breaks are inserted. If ratios appear in the line, only the number of characters in either the numerator or the denominator is counted, depending on which is longer. For matrices or tables only the longest row counts. Subscript or superscript characters are usually not counted as whole characters (see B<subscript_size>).

=item B<line_break>

String to be inserted as a new line break.

=item B<line_break_at>

Regular expression before which line breaks may be inserted.

=item B<subscript_size>

How much subscript/superscript characters count. A value of 0.5 e.g. means that two subscript characters count as much as one "usual" character towards the target B<line_length>.

=back

=head1 SEE ALSO

B<mathtomath>

Math::ToMath::Printer::Latex

=cut


#add hashes
sub add{
    my @hashes=@_;
    my %res=(string => '', length => 0, num_left=>0);
    foreach my $hash (@hashes){
    	    $res{string}.=$hash->{string};
    	    $res{length}+=$hash->{length};
	    $res{num_left}+=$hash->{num_left} if defined $hash->{num_left};
	    };
    return \%res;
};
%}

%token BEGMATRIX	#begin matrix environment
%token ENDMATRIX	#end matrix environment
%token LEFT		#\left
%token RIGHT		#\right
%token SEPARATOR 	# where we are allowed to break lines
%token ANY 		# basically the whole rest

%left ENDROW 		#end a matrix row
%nonassoc SUB # '^' '_' 
%left FRAC

%%

input: /* empty */
       | expression	{$_[1]->{string}} #just return the string portion
;

expression: term
	    | separator
	    | expression term		{add($_[1],$_[2])}
	    | expression left		{add($_[1],$_[2])}
	    | expression right		{add($_[1],$_[2])}
	    | expression separator	{
	      		 		if($_[1]->{length}>$_[0]->{line_length}){
						#insert line break
						#make sure that all \lefts are closed
						$_[1]->{string}.=('\right.' x $_[1]->{num_left}) 
							if defined $_[1]->{num_left};
						#line break
						$_[1]->{string}.="$_[0]->{line_break}";
						$_[1]->{length}=0;
						$_[1]->{string}.=('\left.' x $_[1]->{num_left}) 
							if defined $_[1]->{num_left};
						}
	      		 		add($_[1],$_[2])
			 		}
					
	    
;


term: ANY				{
      					my %hash=(string=>$_[1],length=> length $_[1]);
					\%hash
					}
      |  '{' arg '}'                    {
      	      	      	      	  	my %hash;
					$hash{length}=$_[2]->{length};
					$hash{string}="$_[1]$_[2]->{string}$_[3]";
					\%hash
      	     	     			}
      |  FRAC '{' arg '}' '{' arg '}'	{
      	      	      	      	  	my %hash;
					$hash{length}=($_[3]->{length}>$_[6]->{length})?$_[3]->{length}:$_[6]->{length};
					$hash{string}="$_[1]$_[2]$_[3]->{string}$_[4]$_[5]$_[6]->{string}$_[7]";
					\%hash
      	      	      	      	  	}
      |  FRAC ANY ANY			{
      	      	      	      	  	my %hash;
					$hash{length}=1;
					$hash{string}="$_[1]$_[2]$_[3]";
					\%hash
      	      	      	      	  	}

      |  SUB '{' arg '}'		{
      	      	      	      	  	my %hash;
					$hash{length}=$_[0]->{subscript_size}*$_[3]->{length};
					$hash{string}="$_[1]$_[2]$_[3]->{string}$_[4]";
					\%hash
      	      	      	      	  	}
      |  SUB ANY		    	{
      	      	      	      	  	my %hash;
					$hash{length}=$_[0]->{subscript_size};
					$hash{string}="$_[1]$_[2]";
					\%hash
      	      	      	      	  	}

      | BEGMATRIX matrixarg ENDMATRIX		{
      	      	      	      	  	my %hash;
					$hash{length}=$_[2]->{length};
					$hash{string}="$_[1]$_[2]->{string}$_[3]";
					\%hash
      	      	      	      	  	}

;

matrixarg: arg
          |matrixarg ENDROW matrixarg	{
      	       	      	   		my %hash;
 	  				$hash{length}=($_[1]->{length}>$_[3]->{length})?$_[1]->{length}:$_[3]->{length};
 	  				$hash{string}="$_[1]->{string}$_[2]$_[3]->{string}";
 	  				\%hash
 	  				}
;


arg: term
     |separator
     |arg term		{add($_[1],$_[2])}
     |arg separator	{add($_[1],$_[2])}
     |arg left		{add($_[1],$_[2])}
     |arg right		{add($_[1],$_[2])}
;

separator: SEPARATOR	{
      			my %hash=(string=>$_[1],length=> length $_[1]);
			\%hash
			}
;

left: LEFT	{
    		my %hash=(string=>$_[1],length=> 0,num_left=>1);
		\%hash
      		}
;

right: RIGHT	{
    		my %hash=(string=>$_[1],length=> 0,num_left=>-1);
		\%hash
      		}
;
%%

sub _error {
    if(exists $_[0]->YYData->{ERRMSG}) {
	print $_[0]->YYData->{ERRMSG};
        delete $_[0]->YYData->{ERRMSG};
        return;
    };
}

sub _lexer {
    my $parser =shift;
    
    return('',undef) if $parser->YYData->{INPUT} eq '';
    for ($parser->YYData->{INPUT}) {
    	return('FRAC',$1) if s/^(\\frac)//;
	return('SEPARATOR',$1) if s/^($parser->{line_break_at})//;
	return('SUB',$1) if s/^([\^_])//;
	return($1,$1) if s/^([\{\}])//;
	return('BEGMATRIX',$1) if s/^(\\begin\{(array|tabular|(p|b|B|v|V|small)?matrix)\}(\{[lcr]*\})?)//;
	return('ENDMATRIX',$1) if s/^(\\end\{(array|tabular|(p|b|B|v|V|small)?matrix)\})//;
	return('LEFT',$1) if s/^(\\left)//;
	return('RIGHT',$1) if s/^(\\right)//;
	return('ENDROW',$1) if(s/^(\\\\)//);
	return('ANY',$1) if s/^(\\([[:alpha:]]+|\{|\})?|.)//s;
    }
}

sub slice {
    my $self=shift;
    my $data=shift;
    for ($data){
	$self->YYData->{INPUT} = $_
    }
    $self->YYParse( yylex => \&_lexer, yyerror => \&_error );
}

sub init{
    my $self=shift;
    my $args=shift;
    foreach my $property ('subscript_size','line_length','line_break','line_break_at'){
    	    $args->{$property} // die "Failed to insert line breaks: option $property not set";
    	    $self->{$property}=$args->{$property};
    }
}
=head1 AUTHOR

Andreas Maier, E<lt>email@addressE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2010-2011 by Andreas Maier

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.1 or,
at your option, any later version of Perl 5 you may have available.

=cut
