/* This is the grammar for general mathematical formulas */
%{
use Math::ToMath qw(:all);
use Data::Dump;
#special symbols
my %special_symbols=Printer->get_config(Symbols->get_symbol_file_for_class(__PACKAGE__));
%}

%token NUMBER
%token SYMBOL

%left ';'
%left ','
%right '=' 
%left '>' '<' ID NE GE LE
%left '+' '-'
%left '*' '/'
%left '^'
%nonassoc '.'
%nonassoc UMINUS
%nonassoc WILDCARD
%%

input: /* empty */
       | term	
;

term:	symbol
	| number
	| relation 
	| operation
	| bracket
	| function | list
	| index
	| wildcard
;

symbol:	SYMBOL	{
		my $symbol=$_[1];
		#special characters
		if(defined $special_symbols{$symbol}){
			   $symbol="**$special_symbols{$symbol}**";		
		}
		Expression->new(name =>$symbol,is => 'symbol')
		}
;


number: NUMBER 	{Expression->new(name =>$_[1],is => 'number')}
;

relation:	term '=' term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term ID term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term NE term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '>' term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term GE term	{Expression->new(name =>'>=',is => 'operator',args => [$_[1],$_[3]])}
		| term '<' term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term LE term	{Expression->new(name =>'<=',is => 'operator',args => [$_[1],$_[3]])}
;


operation:	'+' term			{$_[2]}
		| term '+' term 		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| '-' term	%prec UMINUS	{Expression->new(name =>'u-',is => 'operator',args => [$_[2]])}
		| term ';' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term ';'			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1]])}
		| term '-' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '*' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		|  number bracket %prec '*'	{Expression->new(name =>'*',is => 'operator',args => [$_[1],$_[2]])} 
		|  number symbol %prec '*' 	{Expression->new(name =>'*',is => 'operator',args => [$_[1],$_[2]])} 
		|  number function %prec '*' 	{Expression->new(name =>'*',is => 'operator',args => [$_[1],$_[2]])} 
		| term '/' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '^' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '.' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
;

bracket: '(' term ')'	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[2]])}
;

function:	symbol '(' term ')'		{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
		| wildcard '(' term ')'		{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
	  	| symbol '(' sequence ')'	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
	  	| wildcard '(' sequence ')'	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
#  also support currying
	  	| function '(' term ')' 	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
;

list:		'{' '}'				{Expression->new(name =>['{','}'],is => 'bracket')}
		| '{' term '}'			{Expression->new(name =>['{','}'],is => 'bracket',args => [$_[2]])}
		| '{' sequence '}'		{Expression->new(name =>['{','}'],is => 'bracket',args => [$_[2]])}
;

sequence: term ',' term {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
	    | term ',' sequence {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
;

index: symbol '[' term ']' {Expression->new(name =>['[',']'],is => 'bracket',args => [$_[1],$_[3]])}
       | symbol '[' sequence ']' {Expression->new(name =>['[',']'],is => 'bracket',args => [$_[1],$_[3]])}
       | list '[' term ']' {Expression->new(name =>['[',']'],is => 'bracket',args => [$_[1],$_[3]])}
       | list '[' sequence ']' {Expression->new(name =>['[',']'],is => 'bracket',args => [$_[1],$_[3]])}
;
wildcard: symbol WILDCARD {Expression->new(name => $_[2],is => 'operator',args => [$_[1]])}
;

%%


my %description=(
    NUMBER => 'a number',
    SYMBOL => 'a symbol',
    ID => "'==='",
    NE => "'!='",
    GE => "'>='",
    LE => "'<='",
    UMINUS => "unary '-'",
    WILDCARD => "a wildcard"
    );

my $cache_size=4;

sub _error {
    my $parser=shift;

    if(exists $parser->YYData->{ERRMSG}) {
	print $parser->YYData->{ERRMSG};
        delete $parser->YYData->{ERRMSG};
        return;
    };
    my $what=$parser->YYCurval?("'".$parser->YYCurval."'"):"end of input";
    my @expected= map{$_="'$_'"} grep{$_} ($parser->YYExpect);
    map{s/^'([[:upper:]]+)'$/$description{$1}/e} @expected;
    my $here=substr(
	$parser->{cache}.$parser->YYData->{INPUT},
	0,
	2*$cache_size-1
	);
    $parser->{error_desc} = "Syntax error: ";
    if(!@expected){
	$parser->{error_desc}= "unexpected token $what\n";
    }
    elsif(grep {$_ eq $what} @expected){
	$parser->{error_desc} .= "multiple occurence of non-associative operator '$what'\n";
    }
    else{
	$expected[$#expected]="or $expected[$#expected]" if $#expected;
	local $"=', ';
	$parser->{error_desc} .= "read $what, expected @expected\n";
    }

    $parser->{error_desc} .= "   HERE>>$here<<HERE\n" if $here;
    return;
}

sub _lexer {
    my $parser =shift;
    
    return('',undef) if $parser->YYData->{INPUT} eq '';
    my ($type,$token);
    for ($parser->YYData->{INPUT}) {
    	s/^(\s+)//;
	$parser->{cache}.=$1;
    	# first check for reals, then for integers
	if   (s/^(\d*\.\d+|\d+\.\d*)//) {($type,$token)=('NUMBER',$1)} 
	elsif(s/^(\d+)//)               {($type,$token)=('NUMBER',$1)} 
	elsif(s/^([[:alpha:]]\w*)//)    {($type,$token)=('SYMBOL',$1)}
	elsif(s/^(==)//)                {($type,$token)=('ID',$1)}
	elsif(s/^(!=)//)                {($type,$token)=('NE',$1)}
	elsif(s/^(<=|=>)//)             {($type,$token)=('LE',$1)}
	elsif(s/^(=>|<=)//)             {($type,$token)=('GE',$1)}
	elsif(s/^(\?{1,3})//)           {($type,$token)=('WILDCARD',$1)}
        elsif(s/^(.)//s)                {($type,$token)=($1,$1)}
    }
    $parser->{cache}.=$token;
    $parser->{cache}=substr($parser->{cache},-$cache_size);
    return($type,$token);
}

sub parse {
    my $self=shift;
    my $data=shift;
    for ($data){
	$self->YYData->{INPUT} = $_
    }
    $self->YYParse( yylex => \&_lexer, yyerror => \&_error );
}

