/* This is the grammar for Mathematica */
/*
TODO: 
      - improve support for named characters
*/
%{
=head1 NAME

Math::ToMath::Parser::Mathematica - Parser for expressions in Mathematica format

=cut

use Math::ToMath qw(:all);
use Math::BigFloat;
use 5.10.1;
use strict;
use warnings;

#use Data::Dump;
my %special_symbols=Printer->get_config(Symbols->get_symbol_file_for_class(__PACKAGE__));

=head1 SYNOPSIS

 use Math::ToMath::Parser::Mathematica;

 my $parser=Math::ToMath::Parser::Mathematica->new();
 my $expression=$parser->parse($expression_string)


=head1 DESCRIPTION

Math::ToMath::Parser::Mathematica provides a parser for expressions in Mathematica's InputFormat. This means it is quite a bit more restrictive than Mathematica itself. In many cases multiplication signs are needed where Mathematica would just silently insert them. In addition quite a few Mathematica operators are not implemented.

=over 2

=item B<new>

Create a new parser object

=item B<parse>

Parse the given expression string and return a corresponding Math::ToMath::Expression object.

=back

=head1 SEE ALSO

TODO: link to Wolfram web site?

L<mathtomath>

L<Math::ToMath::Printer::Mathematica>

and other Math::ToMath::Parser:: packages

=cut

%}

%token NUMBER
%token SYMBOL
%token STRING

%right FBOX ';'	#FBOX is \`
%left PUT 	# >>  >>>
#%right FUN TUNSET UNSET TSETDEL TSET UPSETDEL UPSET SETDEL SET 
%right SET # =. ^:= ^= := = 
#%right THEREFORE %left BECAUSE
#%left VSEP # |
%left POST # //
%left COLON # expr1:expr2
%nonassoc '&'
%right OSET # /= *= -= +=
%left REPL  # /. //.
%right RULE # :> ->
%left COND # /;
%left CAT # ~~
%nonassoc ':' # pattern:expr or symbol:expr
%left '|'
%nonassoc REP # .. ...
#%right SUCHTHAT
#%left LEFTTEE DOUBLELEFTTEE %right RIGHTTEE DOUBLERIGHTTEE
#%right IMPLIES
#%left EQUIVALENT
#%left NOR OR
%left OR # ||
#%left XNOR XOR
#%left NAND AND
%left  AND # &&
%right '!'
#%right FORALL EXISTS NEXISTS
#%left SETCMP
%left SAME # === =!=
#%??? ORDERINGOPERATOR
%left CMP # <= < >= > != == 
%left SPAN # ;;
#%left UNION
#%left INTERSECTION
%left '+' '-' # PLUSMINUS MINUSPLUS
#%right SUM
#%left CIRCLEPLUS CIRCLEMINUS
#%left CAP CUP
#%left COPRODUCT
#%left VERTICALTILDE
#%right PRODUCT
#%left STAR
%left '×' '*' # ' '
#%left CENTERDOT
#%left CIRCLETIMES
#%left VEE
#%left WEDGE
#%left DIAMOND
%left '\\'
%left DIVIDE # \/ /
%nonassoc UPLUSMINUS # - +, also unary +- -+
%left '.'
#%left CROSS
%left NCMULTIPLY # **
#%left CIRCLEDOT
#%right SMALLCIRCLE SQUARE
#%right DIFFERENCEDELTA DISCRETERATIO DEL D
#%right INTEGRATE
%right SQRT # \@ \@expr1\%expr2
# EXP is formally not correct here, but I hope it is not ambiguous
%right '^' EXP # ^ *^ #expr1\^expr2\%expr3 is (expr1_expr3)^expr2
%left STRINGJOIN # <>
%left '\''
%left CONJUGATE # TRANSPOSE CONJUGATETRANSPOSE TRANSPOSECONJUGATE # *
%nonassoc FAC # ! !!
%right MAPPLY # @@ @@@ /@ /@@
%left '~' # infix function
%right '@' # prefix function
%nonassoc PREINC # ++ --
%nonassoc INC # ++ -- also: \*
%left '[' ']'
%nonassoc '?'
#% \!
%right SUBSCRIPT # \_ also expr1\_expr2 \% expr3
%right OVERSCRIPT UNDERSCRIPT # UNDEROVERSCRIPT1 UNDEROVERSCRIPT2 # \& \+ expr1\+expr2\%expr3 expr1\&expr3\%expr2
%nonassoc GET # <<
#	   strange input forms?
%left MESSAGENAME # ::
# %nonassoc PIECEWISE
#this is not mathematica default, but I guess we need it
%nonassoc PRECISION # ´
%nonassoc ACCURACY # ´´
%nonassoc PATTERN # _ __ ___ 



%%

input: /* empty */
       | term
;

term:	symbol
	| number
	| string
	| assignment
	| relation 
	| operation
	| bracket
	| function
	| index
	| wildcard
	| list
;

symbol:	SYMBOL	{
		my $symbol=$_[1];
		#special characters
		if(defined $special_symbols{$symbol}){
			   $symbol="**$special_symbols{$symbol}**";		
		}
		elsif($symbol =~ /^\\\[(.*)\]$/){
			$symbol=lc $1;
			$symbol =~ s/capital([a-z])/ucfirst($1)/e;
			$symbol = "**$symbol**";
		}
		Expression->new(name =>$symbol,is => 'symbol')
		}
;

number: NUMBER 	{Expression->new(name =>$_[1],is => 'number')}
	| number PRECISION number {
	  	 	   my $number=Math::BigFloat->new($_[1]->name);
	  	 	   Expression->new(name =>$number->bround($_[3]->name),is => 'number');
			   }
	| number ACCURACY number {
	  	 	   my $number=Math::BigFloat->new($_[1]->name);
	  	 	   Expression->new(name =>$number->bfround(-$_[3]->name),is => 'number');
			   }
;
string: STRING {Expression->new(name =>$_[1],is => 'string')}
;

wildcard: symbol PATTERN {
	 my %wildcard=('_' => '?', '___' => '??', '__' => '???');
	 Expression->new(name =>$wildcard{$_[1]},is => 'operator',args => [$_[1]])
	 }
;
assignment: 	term SET term	     {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term OSET term     {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term PUT term	     {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| symbol ':' term    {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| pattern ':' term   {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term GET term	     {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
;
 
relation:	term SAME term     {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
 		| term COND term     {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
 		| term CMP term	     {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
;


operation:	term ';' term		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term ';'		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1]])}
		| term '&'		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1]])}
		| term REPL term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term RULE term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term CAT term 	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term SPAN term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '+' term 		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '-' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '×' term			{Expression->new(name =>'*',is => 'operator',args => [$_[1],$_[3]])}
		| term '*' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
#this rule is probably correct, but really dangerous		
#      	      	| term term			{Expression->new(name =>'*',is => 'operator',args => [$_[1],$_[2]])}
		| term '\\' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term DIVIDE term		{Expression->new(name =>'/',is => 'operator',args => [$_[1],$_[3]])}
		| '+' term %prec UPLUSMINUS	{$_[2]}
		| '-' term %prec UPLUSMINUS	{Expression->new(name =>'u-',is => 'operator',args => [$_[2]])}
		| term '.' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term NCMULTIPLY term		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| SQRT term			{
		       				my $sqrt=Expression->new(name =>'**sqrt**',is => 'symbol');
		       				Expression->new(name =>['(',')'],is => 'bracket',args => [$sqrt,$_[2]])
						}
#		| SQRT term '\%' term	%prec SRQT	{}
		| term '^' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
#		| term '^' term	'\%' term	{}
		| term STRINGJOIN term		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '\''	  		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1]])}
		| term '*'	%prec CONJUGATE {
		       		      		my $conj=Expression->new(name =>'**conjugate**',is => 'symbol');	
		       		      		Expression->new(name =>['(',')'],is => 'bracket',args => [$conj,$_[1]])
						}
		| term FAC 	      		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1]])}
		| term MAPPLY term		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term INC	    		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1]])}
		| INC term	%prec PREINC	{Expression->new(name =>$_[1],is => 'operator',args => [$_[2]])}
		| term '?' term	      		{
		       		      		my $ptest=Expression->new(name =>'**patterntest**',is => 'symbol');	
		       	   	    		my $args=Expression->new(name =>',',is => 'operator',args =>[$_[1],$_[3]]);
		       		      		Expression->new(name =>['(',')'],is => 'bracket',args => [$ptest,$args])
						}
		| term SUBSCRIPT term		{
		       		      		my $script=Expression->new(name =>'**subscript**',is => 'symbol');	
		       	   	    		my $args=Expression->new(name =>',',is => 'operator',args =>[$_[1],$_[3]]);
		       		      		Expression->new(name =>['(',')'],is => 'bracket',args => [$script,$args])
		  		       		}
#		| term SUBSCRIPT term '\%' term	{}
		| term UNDERSCRIPT term		{
		       		      		my $script=Expression->new(name =>'**underscript**',is => 'symbol');	
		       	   	    		my $args=Expression->new(name =>',',is => 'operator',args =>[$_[1],$_[3]]);
		       		      		Expression->new(name =>['(',')'],is => 'bracket',args => [$script,$args])
		  		       		}
		| term OVERSCRIPT term		{
		       		      		my $script=Expression->new(name =>'**overscript**',is => 'symbol');	
		       	   	    		my $args=Expression->new(name =>',',is => 'operator',args =>[$_[1],$_[3]]);
		       		      		Expression->new(name =>['(',')'],is => 'bracket',args => [$script,$args])
		  		       		}
		| term MESSAGENAME string	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '|' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term REP 			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1]])}
		| term OR term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term AND term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| '!' term			{Expression->new(name =>$_[1],is => 'operator',args => [$_[2]])}
		| number EXP term		{
		  	     			my $base=Expression->new(name =>'10',is => 'number');
						my $pow=Expression->new(name =>'^',is => 'operator',args => [$base,$_[3]]);
		  	     			Expression->new(name =>'*',is => 'operator',args => [$_[1],$pow])
						}
;

bracket: '(' term ')'	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[2]])}
	 | term '[' '[' term ']' ']' {Expression->new(name =>['[',']'],is => 'bracket',args => [$_[1],$_[4]])}
	 | term '[' '[' sequence ']' ']' {Expression->new(name =>['[',']'],is => 'bracket',args => [$_[1],$_[4]])}
;

function:	term '[' term ']'		{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
		| term '[' sequence ']' 	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
		| term POST term    		{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[3],$_[1]])}
	 	| term '@' term	    		{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
		| term '~' term '~' term	{
		        	   	    		my $args=Expression->new(name =>',',is => 'operator',args =>[$_[1],$_[5]]);
		        	   	    		Expression->new(name =>['(',')'],is => 'bracket',args =>[$_[3],$args])
		 				}
;

list:		'{' '}'				{Expression->new(name =>['{','}'],is => 'bracket')}
		| '{' term '}'			{Expression->new(name =>['{','}'],is => 'bracket',args => [$_[2]])}
		| '{' sequence '}'		{Expression->new(name =>['{','}'],is => 'bracket',args => [$_[2]])}
;

sequence: term ',' term {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
	    | sequence ',' term {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
;


%%


my $cache_size=4;

sub _error {
    my $parser=shift;

    if(exists $parser->YYData->{ERRMSG}) {
	print $parser->YYData->{ERRMSG};
        delete $parser->YYData->{ERRMSG};
        return;
    };
    my $what=$parser->YYCurval?("'".$parser->YYCurval."'"):"end of input";
    my @expected= map{$_="'$_'"} grep{$_} ($parser->YYExpect);
    #there are too many possible types, we don't want to list them all
    #map{s/^'([[:upper:]]+)'$/$description{$1}/e} @expected;
    my $here=substr(
	$parser->{cache}.$parser->YYData->{INPUT},
	0,
	2*$cache_size-1
	);
    $parser->{error_desc} = "Syntax error: ";
    if($what =~ /^'[\)\]\}]'$/){
	$parser->{error_desc}.= "unmatched closing bracket: $what\n";
    }
    elsif(!@expected){
	$parser->{error_desc}.= "unexpected token $what\n";
    }
    elsif(grep {$_ eq $what} @expected){
	$parser->{error_desc} .= "multiple occurence of non-associative operator $what\n";
    }
    elsif(
	#if we are at the end of input and there are unclosed brackets
	# then that is the problem
	(! $parser->YYCurval)
	&& (grep {/^'[\)\]\}]'$/} @expected)
	&& (grep {$_>0} values %{$parser->{bracket_level}})
	){
	for my $bracket (keys %{$parser->{bracket_level}}){
	    if($parser->{bracket_level}->{$bracket}>0){
		$parser->{error_desc} .="unmatched opening bracket '$bracket'\n";
		$parser->{error_desc} .= "   HERE>>$parser->{bracket_cache}->{$bracket}<<HERE\n" 
		    if $parser->{bracket_cache}->{$bracket};
	    }
	}
	#don't print the end of the input - it adds basically no information
	$here=0;
    }
    else{
	$parser->{error_desc}.= "unexpected token $what\n";
	#there are too many possible types, we don't want to list them all
	# $expected[$#expected]="or $expected[$#expected]" if $#expected;
	# local $"=', ';
	# $parser->{error_desc} .= "read $what, expected @expected\n";
    }

    $parser->{error_desc} .= "   HERE>>$here<<HERE\n" if $here;
    return;
}

sub _lexer {
    my $parser =shift;
    
    return('',undef) if $parser->YYData->{INPUT} eq '';

    my ($type,$token);
    for ($parser->YYData->{INPUT}) {
    	s/^(\s+)// and $parser->{cache}.=$1;

    	# first check for reals, then for integers
	if(s/^(\d*\.\d+|\d+\.\d*)//) {($type,$token)=('NUMBER',$1)} 
	elsif(s/^(\d+)//) {($type,$token)=('NUMBER',$1)} 
	elsif(s/^(([[:alpha:]]|\$)([[:alnum:]]|\$)*)//) {($type,$token)=('SYMBOL',$1)}
	#named characters
	elsif(s/^(\\\[.*?\])//) {($type,$token)=('SYMBOL',$1)}
	#slots - atm treated like usual symbols
	elsif(s/^(##?\d*)//) {($type,$token)=('SYMBOL',$1)}
	elsif(s/^"(.*?[^\\])"//s) {($type,$token)=('STRING',$1)}
	elsif(s/^(\\´)//) {($type,$token)=('FBOX',$1)}
	elsif(s/^(>{2,3})//) {($type,$token)=('PUT',$1)}
	elsif(s/^(=\.|\^?:?=)//) {($type,$token)=('SET',$1)}
	elsif(s$^(//)$$) {($type,$token)=('POST',$1)}
	elsif(s/^([\/\*\+-]=)//) {($type,$token)=('OSET',$1)}
	elsif(s$^(/?/\.)$$) {($type,$token)=('REPL',$1)}
	elsif(s/^([:-]>)//) {($type,$token)=('RULE',$1)}
	elsif(s/^(\/;)//) {($type,$token)=('COND',$1)}
	elsif(s/^(~~)//) {($type,$token)=('CAT',$1)}
	elsif(s/^(\.{2,3})//) {($type,$token)=('REP',$1)}
	elsif(s/^(\|\|)//) {($type,$token)=('OR',$1)}
	elsif(s/^(&&)//) {($type,$token)=('AND',$1)}
	elsif(s/^([<>]=?|[!=]=)//) {($type,$token)=('CMP',$1)}
	elsif(s/^(;;)//) {($type,$token)=('SPAN',$1)}
	elsif(s/^(\*\*)//) {($type,$token)=('NCMULTIPLY',$1)}
	elsif(s/^(\\@)//) {($type,$token)=('SQRT',$1)}
	elsif(s/^(<>)//) {($type,$token)=('STRINGJOIN',$1)}
	elsif(s/^(!!?)//) {($type,$token)=('FAC',$1)}
	elsif(s/^([\/@]@@?)//) {($type,$token)=('MAPPLY',$1)}
	elsif(s$^(\\?/)$$) {($type,$token)=('DIVIDE',$1)}
	elsif(s/^(\+\+|--)//) {($type,$token)=('INC',$1)}
	elsif(s/^(\\_)//) {($type,$token)=('SUBSCRIPT',$1)}
	elsif(s/^(\\&)//) {($type,$token)=('OVERSCRIPT',$1)}
	elsif(s/^(\\\+)//) {($type,$token)=('UNDERSCRIPT',$1)}
	elsif(s/^(<<)//) {($type,$token)=('GET',$1)}
	elsif(s/^(::)//) {($type,$token)=('MESSAGENAME',$1)}
	elsif(s/^(_{1,3})//) {($type,$token)=('PATTERN',$1)}
	elsif(s/^(\*\^)//) {($type,$token)=('EXP',$1)}
	elsif(s/^(´´)//) {($type,$token)=('ACCURACY',$1)}
	elsif(s/^(´)//) {($type,$token)=('PRECISION',$1)}
	elsif(s/^([\(\[\{])//){
	    $token=$1;
	    $type=$token;
	    # store some information - if there is a syntax error this
	    # can help to identify its source
	    ++$parser->{bracket_level}->{$token};
	    if($parser->{bracket_level}->{$token}==1){
		$parser->{bracket_cache}->{$token}=
		    substr($parser->{cache},-$cache_size/2)
		    .$token
		    .substr($parser->YYData->{INPUT},0,$cache_size/2)
		    ;
	    }
	}
	elsif(s/^([\)\]\}])//){
	    $token=$1;
	    $type=$token;
	    my $bracket =$token;
	    $bracket =~ tr/)]}/([{/;
	    --$parser->{bracket_level}->{$bracket};
	}
        elsif(s/^(.)//s) {($type,$token)=($1,$1)}
	elsif($_ eq '') {($type,$token)=(undef,'')}
    }
    $parser->{cache}.=$token;
    $parser->{cache}=substr($parser->{cache},-$cache_size);
    return ($type,$token);
}

sub parse {
    my $self=shift;
    my $data=shift;
    $self->{cache}='';
    for ($data){
	$self->YYData->{INPUT} = $_
    }
    $self->YYParse( yylex => \&_lexer, yyerror => \&_error );
}

=head1 AUTHOR

Andreas Maier, E<lt>email@addressE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2010-2011 by Andreas Maier

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.1 or,
at your option, any later version of Perl 5 you may have available.

=cut
