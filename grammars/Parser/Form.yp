/* This is the grammar for FORM */
%{
use Math::ToMath qw(:all);
use Data::Dump;
use 5.10.1;
use strict;
use warnings;

my %special_symbols=Printer->get_config(Symbols->get_symbol_file_for_class(__PACKAGE__));
%}

%token NUMBER
%token SYMBOL
%token ELLIPSIS

%left ';'
%left ','
%nonassoc '='
%left '+' '-'
%left '*' '/'
%nonassoc UN
%left '^'
%nonassoc '.'
%%

input: /* empty */
       | term	
;

term:	symbol
	| number
	| ellipsis
	| relation 
	| operation
	| bracket
	| function | list
	| index
	| wildcard
;

symbol:	SYMBOL	{
		my $symbol=$_[1];
		#special characters
		if(defined $special_symbols{$symbol}){
			   $symbol="**$special_symbols{$symbol}**";		
		}
		Expression->new(name =>$symbol,is => 'symbol')
		}
;


number: NUMBER 	{Expression->new(name =>$_[1],is => 'number')}
;

ellipsis: ELLIPSIS 	{Expression->new(name =>$_[1],is => 'symbol')}
;

relation:	term '=' term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
;


operation:	'+' term			{$_[2]}
		| term '+' term 		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| '-' term	%prec UN	{Expression->new(name =>'u-',is => 'operator',args => [$_[2]])}
		| term '-' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '*' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '/' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '^' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term '.' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term ';' term			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term ';' 			{Expression->new(name =>$_[2],is => 'operator',args => [$_[1]])}
;

bracket: '(' term ')'	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[2]])}
;

function:	symbol '(' term ')'		{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
		| wildcard '(' term ')'		{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
	  	| symbol '(' sequence ')'	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
	  	| wildcard '(' sequence ')'	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
;

list:		'{' '}'				{Expression->new(name =>['{','}'],is => 'bracket')}
		| '{' term '}'			{Expression->new(name =>['{','}'],is => 'bracket',args => [$_[2]])}
		| '{' sequence '}'		{Expression->new(name =>['{','}'],is => 'bracket',args => [$_[2]])}
;

sequence: term ',' term {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
	    | sequence ',' term {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
;

index: symbol '[' term ']' {Expression->new(name =>['[',']'],is => 'bracket',args => [$_[1],$_[3]])}
       | list '[' term ']' {Expression->new(name =>['[',']'],is => 'bracket',args => [$_[1],$_[3]])}
;
wildcard: symbol '?' {Expression->new(name => $_[2],is => 'operator',args => [$_[1]])}
	  | '?' symbol  {Expression->new(name => '??',is => 'operator',args => [$_[2]])}
	  | wildcard list {die "TODO: wildcard list"}
	  | wildcard '!' list {die "TODO: wildcard '!' list"}
	  | wildcard index {die "TODO: wildcard index"}
          | wildcard symbol {die "TODO: wildcard (named set)"}	
;

%%

my %description=(
    NUMBER => 'a number',
    SYMBOL => 'a symbol',
    ELLIPSIS => "'...'",
    UN => "unary '-'",
    WILDCARD => "a wildcard"
    );

my $cache_size=4;

sub _error {
    my $parser=shift;

    if(exists $parser->YYData->{ERRMSG}) {
	print $parser->YYData->{ERRMSG};
        delete $parser->YYData->{ERRMSG};
        return;
    };
    my $what=$parser->YYCurval?("'".$parser->YYCurval."'"):"end of input";
    my @expected= map{$_="'$_'"} grep{$_} ($parser->YYExpect);
    map{s/^'([[:upper:]]+)'$/$description{$1}/e} @expected;
    my $here=substr(
	$parser->{cache}.$parser->YYData->{INPUT},
	0,
	2*$cache_size-1
	);
    $parser->{error_desc} = "Syntax error: ";
    if($what =~ /^'[\)\]\}]'$/){
	$parser->{error_desc}.= "unmatched closing bracket: $what\n";
    }
    elsif(!@expected){
	$parser->{error_desc}.= "unexpected token $what\n";
    }
    elsif(grep {$_ eq $what} @expected){
	$parser->{error_desc} .= "multiple occurence of non-associative operator $what\n";
    }
    elsif(
	#if we are at the end of input and there are unclosed brackets
	# then that is the problem
	(! $parser->YYCurval)
	&& (grep {/^'[\)\]\}]'$/} @expected)
	&& (grep {$_>0} values %{$parser->{bracket_level}})
	){
	for my $bracket (keys %{$parser->{bracket_level}}){
	    if($parser->{bracket_level}->{$bracket}>0){
		$parser->{error_desc} .="unmatched opening bracket '$bracket'\n";
		$parser->{error_desc} .= "   HERE>>$parser->{bracket_cache}->{$bracket}<<HERE\n" 
		    if $parser->{bracket_cache}->{$bracket};
	    }
	}
	#don't print the end of the input - it adds basically no information
	$here=0;
    }
    else{
	$expected[$#expected]="or $expected[$#expected]" if $#expected;
	local $"=', ';
	$parser->{error_desc} .= "read $what, expected @expected\n";
    }

    $parser->{error_desc} .= "   HERE>>$here<<HERE\n" if $here;
    return;
}

sub _lexer {
    my $parser =shift;
    #determines whether an opening square bracket indicates
    # a symbol or an index 
    state $symbol_mode=1;

    return('',undef) if $parser->YYData->{INPUT} eq '';
    my ($type,$token);
    for ($parser->YYData->{INPUT}) {
    	s/^(\s+)// and $parser->{cache}.=$1;

	#special symbols of the type [...]
    	if($symbol_mode and s/^\[//){
	    my $sym='[';
	    my $brackets=1;
	    while($brackets){
		$_ or die "Symbol '[$sym' has no terminating ']'";
		$sym.=$1 if s/^([^\[\]]+)//;
		if (s/^\[//){
		    ++$brackets;
		    $sym.='['
		}
		if (s/^\]//){
		    --$brackets;
		    $sym.=']'
		}
	    }
	    $symbol_mode=0;
	    ($type,$token)=('SYMBOL',$sym)
	}
	elsif (s/^(\$?[[:alpha:]][[:alnum:]]*_?)//){
	    $symbol_mode=0;
	    ($type,$token)=('SYMBOL',$1)
	} 
	elsif (s/^(\.{3})//){
	    $symbol_mode=0;
	    ($type,$token)=('ELLIPSIS',$1)
	} 

	elsif(s/^(\})//){
	    $symbol_mode=0;
	    ($type,$token)=('}','}')
	}
	elsif(s/^(\d+)//){
	    $symbol_mode=1;		
	    ($type,$token)=('NUMBER',$1) ; 
	}
	elsif(s/^([\(\[\{])//)          {
	    $symbol_mode=1;		
	    ($type,$token)=($1,$1);
	    # store some information - if there is a syntax error this
	    # can help to identify its source
	    ++$parser->{bracket_level}->{$token};
	    if($parser->{bracket_level}->{$token}==1){
		$parser->{bracket_cache}->{$token}=
		    substr($parser->{cache},-$cache_size/2)
		    .$token
		    .substr($parser->YYData->{INPUT},0,$cache_size/2)
		    ;
	    }
	}
	elsif(s/^([\)\]\}])//)          {
	    $symbol_mode=1;		
	    ($type,$token)=($1,$1);
	    my $bracket =$token;
	    $bracket =~ tr/)]}/([{/;
	    --$parser->{bracket_level}->{$bracket};
	}
	elsif(s/^(.)//s){
	    $symbol_mode=1;		
	    ($type,$token)=($1,$1);
	}
	elsif($_ eq '') {($type,$token)=(undef,'')}
    }
    $parser->{cache}.=$token;
    $parser->{cache}=substr($parser->{cache},-$cache_size);
    return($type,$token);
}

sub parse {
    my $self=shift;
    my $data=shift;
    $self->{cache}='';
    for ($data){
	$self->YYData->{INPUT} = $_
    }
    $self->YYParse( yylex => \&_lexer, yyerror => \&_error );
}

=head1 AUTHOR

Andreas Maier, E<lt>email@addressE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2010-2011 by Andreas Maier

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.1 or,
at your option, any later version of Perl 5 you may have available.

=cut
