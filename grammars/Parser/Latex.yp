/* This is the grammar for LaTeX */
%{
use Math::ToMath qw(:all);
#use Data::Dump;
use 5.10.1;
use strict;
use warnings;

my %special_symbols=Printer->get_config(Symbols->get_symbol_file_for_class(__PACKAGE__));

sub to_symbol{
    my $symbol=shift;
    #special characters
    if(defined $special_symbols{$symbol}){
	$symbol="**$special_symbols{$symbol}**";		
    }
    return Expression->new(name =>$symbol,is => 'symbol')
};
%}

%token DIGIT
%token ALPHA
%token CMD
%token CBO # \{
%token CBC # \}

%nonassoc OVER
%left ','
%left '&'
%left LINEBREAK # \\
%left '=' '>' '<' ID NE GE LE
%left '+' '-'
%left MULTI '/'
%nonassoc '.'
%nonassoc '^' '_'
%left JOIN
%left FRAC
%%

input: /* empty */
       | term	
;

term:	number {Expression->new(name =>$_[1],is => 'number')}
	| symbol {to_symbol($_[1])}
	| cmd
	| operation
	| relation
	| function
	| bracket
	| matrix
	| align
;


number: DIGIT
	| number DIGIT %prec JOIN {$_[1].$_[2]}
	| number '.' %prec JOIN {$_[1].'.'}
;

symbol: ALPHA
	| symbol ALPHA %prec JOIN {$_[1].$_[2]}
;

cmd: CMD {to_symbol($_[1])}
;

atom: DIGIT {Expression->new(name =>$_[1],is => 'number')}
      | ALPHA {to_symbol($_[1])}
      | cmd
;


argument: atom 
	  | '{' term '}' {$_[2]}
;

operation: FRAC argument argument	{Expression->new(name =>'/',is => 'operator',args => [$_[2],$_[3]])}
	   |     term OVER term 	{Expression->new(name =>'/',is => 'operator',args => [$_[1],$_[3]])}
	   | '{' term OVER term '}' 	{Expression->new(name =>'/',is => 'operator',args => [$_[2],$_[4]])}
	   | term '/' term  		{Expression->new(name =>'/',is => 'operator',args => [$_[1],$_[3]])}
	   | term MULTI term  		{Expression->new(name =>'*',is => 'operator',args => [$_[1],$_[3]])}
	   | '+' term			{$_[2]}
	   | term '+' term 		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
	   | '-' term			{Expression->new(name =>$_[1],is => 'operator',args => [$_[2]])}
	   | term '-' term		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
	   | term '^' argument		{Expression->new(name =>'^',is => 'operator',args => [$_[1],$_[3]])}
	   | term '_' argument		{
	     	      			my $sym=Expression->new(name =>'**subscript**',is => 'symbol');
					my $args=Expression->new(name =>',',is => 'operator',args=>[$_[1],$_[3]]);
	     	      			Expression->new(name => ['(',')'],is => 'bracket',args => [$sym,$args])
					}
	   |  number bracket %prec MULTI	{
	      	     	     	   		my $num=Expression->new(name =>$_[1],is => 'number'); 
	      	     	     	   		Expression->new(name =>'*',is => 'operator',args => [$num,$_[2]])} 
	   |  number symbol %prec MULTI 	{
	      	     	     	   		my $num=Expression->new(name =>$_[1],is => 'number'); 
	      	     	    	  		my $sym=to_symbol($_[2]);
	      	     	    	  		Expression->new(name =>'*',is => 'operator',args => [$num,$sym])
						} 
	   |  number cmd %prec MULTI 		{
	      	     	     	   		my $num=Expression->new(name =>$_[1],is => 'number'); 
						Expression->new(name =>'*',is => 'operator',args => [$num,$_[2]])
						} 
	   |  number function %prec MULTI 	{
	      	     	     	   		my $num=Expression->new(name =>$_[1],is => 'number'); 
						Expression->new(name =>'*',is => 'operator',args => [$num,$_[2]])
						} 
	   | sequence	      	    		{$_[1]->{name}=';';$_[1]} 
# 	   | term '.' term		{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])} 
#	   | term term %prec MULTI  {Expression->new(name =>'*',is => 'operator',args => [$_[1],$_[2]])}
;

relation:	term '=' term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term ID term	{Expression->new(name =>"==",is => 'operator',args => [$_[1],$_[3]])}
		| term NE term	{Expression->new(name =>"!=",is => 'operator',args => [$_[1],$_[3]])}
		| term '>' term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term GE term	{Expression->new(name =>'>=',is => 'operator',args => [$_[1],$_[3]])}
		| term '<' term	{Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
		| term LE term	{Expression->new(name =>'<=',is => 'operator',args => [$_[1],$_[3]])}
;

function:	symbol '(' term ')'		{
		   	      	      	 	my $sym=to_symbol($_[1]);
    	   					Expression->new(name =>['(',')'],is => 'bracket',args => [$sym,$_[3]])
						}
		| cmd '(' term ')'		{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
#  also support currying
	  	| function '(' term ')' 	{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[1],$_[3]])}
;

bracket:	CBO CBC				{Expression->new(name =>['{','}'],is => 'bracket')}
		| CBO term CBC			{Expression->new(name =>['{','}'],is => 'bracket',args => [$_[2]])}
		| '(' term ')'			{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[2]])}
		| '[' term ']'			{Expression->new(name =>['(',')'],is => 'bracket',args => [$_[2]])}
;

sequence: term ',' term {Expression->new(name =>$_[2],is => 'operator',args => [$_[1],$_[3]])}
 ;
matrix: 	BEGMATRIX table ENDMATRIX	{Expression->new(name =>['{','}'],is => 'bracket',args =>[$_[2]])}
;

table: row
       | row LINEBREAK row	{
       	     	       		my @rows;
				$rows[0]=Expression->new(name =>['{','}'],is => 'bracket',args =>[$_[1]]);
				$rows[1]=Expression->new(name =>['{','}'],is => 'bracket',args =>[$_[3]]);
				Expression->new(name =>',',is => 'operator',args =>\@rows)
				}
;
row:  term
      | row '&' term	{Expression->new(name =>',',is => 'operator',args =>[$_[1],$_[3]])}
;


%%

my %description=(
    DIGIT => 'a number',
    ALPHA => 'a letter',
    CMD => 'a TeX command',
    CBO => "'\{'",
    CBC => "'\}'",
    OVER => "'\over'",
    LINEBREAK => "'\\'",
    MULTI => "'\*'",
    ID => "'\equiv'",
    NE => "'\neq'",
    GE => "'\geq'",
    LE => "'\leq'",
    FRAC => "'\frac'",
    );

my $cache_size=4;

sub _error {
    my $parser=shift;

    if(exists $parser->YYData->{ERRMSG}) {
	print $parser->YYData->{ERRMSG};
        delete $parser->YYData->{ERRMSG};
        return;
    };
    my $what=$parser->YYCurval?("'".$parser->YYCurval."'"):"end of input";
    my @expected= map{$_="'$_'"} grep{$_} ($parser->YYExpect);
    map{s/^'([[:upper:]]+)'$/$description{$1}/e} @expected;
    my $here=substr(
	$parser->{cache}.$parser->YYData->{INPUT},
	0,
	2*$cache_size-1
	);
    $parser->{error_desc} = "Syntax error: ";
    if($what =~ /^'[\)\]\}]'$/){
	$parser->{error_desc}.= "unmatched closing bracket: $what\n";
    }
    elsif(!@expected){
	$parser->{error_desc}.= "unexpected token $what\n";
    }
    elsif(grep {$_ eq $what} @expected){
	$parser->{error_desc} .= "multiple occurence of non-associative operator $what\n";
    }
    elsif(
	#if we are at the end of input and there are unclosed brackets
	# then that is the problem
	(! $parser->YYCurval)
	&& (grep {/^'([\)\]\}]|\\\})'$/} @expected)
	&& (grep {$_>0} values %{$parser->{bracket_level}})
	){
	for my $bracket (keys %{$parser->{bracket_level}}){
	    if($parser->{bracket_level}->{$bracket}>0){
		$parser->{error_desc} .="unmatched opening bracket '$bracket'\n";
		$parser->{error_desc} .= "   HERE>>$parser->{bracket_cache}->{$bracket}<<HERE\n" 
		    if $parser->{bracket_cache}->{$bracket};
	    }
	}
	#don't print the end of the input - it adds basically no information
	$here=0;
    }
    else{
	$expected[$#expected]="or $expected[$#expected]" if $#expected;
	local $"=', ';
	$parser->{error_desc} .= "read $what, expected @expected\n";
    }

    $parser->{error_desc} .= "   HERE>>$here<<HERE\n" if $here;
    return;
}


sub _lexer {
    state $in_matrix_env=0;
    my $parser =shift;
    
    return('',undef) if $parser->YYData->{INPUT} eq '';
    my ($type,$token);
    for ($parser->YYData->{INPUT}) {
    	#dirty hack here: the parser must never return '&' or '\\'
    	# unless we are in a matrix environment
	unless($in_matrix_env){
	    s/^(&|\\\\)+// and $parser->{cache}.=$1;
	}
	if(s/^(\d)//)                      {($type,$token)=('DIGIT',$1) } 
	elsif(s/^([[:alpha:]])//)          {($type,$token)=('ALPHA',$1) }
	elsif(s/^(\\(d|t)?frac)//)         {($type,$token)=('FRAC',$1) }
	elsif(s/^(\\over)//)               {($type,$token)=('OVER',$1) }
	elsif(s/^(\*|\\?(\*|times|cdot))//){($type,$token)=('MULTI',$1) }
	elsif(s/^(\\geq)//)                {($type,$token)=('GE',$1) }
	elsif(s/^(\\leq)//)                {($type,$token)=('LE',$1) }
	elsif(s/^(\\neq)//)                {($type,$token)=('NE',$1) }
	elsif(s/^(\\equiv)//)              {($type,$token)=('ID',$1) }
	elsif(s/^(\\\{|[\(\[\{])//)        {
	    $token=$1;
	    $type=($token eq '\{')?'CBO':$token;
	    # store some information - if there is a syntax error this
	    # can help to identify its source
	    ++$parser->{bracket_level}->{$token};
	    if($parser->{bracket_level}->{$token}==1){
		$parser->{bracket_cache}->{$token}=
		    substr($parser->{cache},-$cache_size/2)
		    .$token
		    .substr($parser->YYData->{INPUT},0,$cache_size/2)
		    ;
	    }
	}
	elsif(s/^(\\\}|[\)\]\}])//)                 {
	    $token=$1;
	    $type=($token eq '\}')?'CBC':$token;
	    my $bracket =$token;
	    $bracket =~ tr/)]}/([{/;
	    --$parser->{bracket_level}->{$bracket};
	}
	elsif(s/^(\\begin\{(array|tabular|(p|b|B|v|V|small)?matrix)\}(\{[lcr]*\})?)//){
	    ++$in_matrix_env;
	    ($type,$token)=('BEGMATRIX',$1) 
	}
	elsif(s/^(\\end\{(array|tabular|(p|b|B|v|V|small)?matrix)\})//){
	    --$in_matrix_env>-1 or die "$1 closes unopened matrix environment";
	    ($type,$token)=('ENDMATRIX',$1) ;
	}
	elsif(s/^(\\\\)//)                 {($type,$token)=('LINEBREAK',$1) }
	elsif(s/^(\\[[:alpha:]]+)//)       {($type,$token)=('CMD',$1) }
	elsif(s/^(.)//s)                   {($type,$token)=($1,$1) }
    }
    $parser->{cache}.=$token;
    $parser->{cache}=substr($parser->{cache},-$cache_size);
    return ($type,$token);
}

sub parse {
    my $self=shift;
    my $data=shift;
    for ($data){
    	#remove whitespace (is this wise?)
	#and formating
	s/([^\\]|^)\\( |[,!;]|([bB]igg?(l|r)?|[lL]arge|[hH]uge|text|it|sl|bf|left|right))/$1/g;
	s/\s+//g;
	$self->YYData->{INPUT} = $_
    }
    $self->YYParse( yylex => \&_lexer, yyerror => \&_error );
}

