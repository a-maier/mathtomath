/* Grammar for options and rules */
%{
# use Data::Dump;
use 5.10.1;
use strict;
use warnings;

%}

%token ASSIGN # assignment operator
%token SEP    # separator

%%

input: /* empty */ {return {}}
       | optionlist
    | optionlist SEP {return $_[1]}
;

optionlist: option
	 | optionlist SEP option {
	 my %left=%{$_[1]};
	 my %right=%{$_[3]};
	 @left{keys %right}=values %right;
	 \%left;
	 }
;

option: name ASSIGN value {return {$_[1] => $_[3]}}
;

name: ANY
      | name ANY {$_[1].$_[2]}
;

value: ANY
      | value ANY {$_[1].$_[2]}
;

%%

sub _error {
    if(exists $_[0]->YYData->{ERRMSG}) {
	print $_[0]->YYData->{ERRMSG};
        delete $_[0]->YYData->{ERRMSG};
        return;
    };
}

sub _lexer {
    my $parser =shift;
    if(
	!defined $parser->YYData->{INPUT} 
	|| $parser->YYData->{INPUT} eq ''
	){
	return('',undef);
    }
    for ($parser->YYData->{INPUT}) {
    	s/^\s+//;
    	return('ASSIGN',$1) if s/^(=>?)//;
	return('SEP',$1) if s/^(;|,)//;
    	return('ANY',$1) if s/^\\("|')//;
    	return('ANY',$2) if s/^("|')(.*?[^\\])\1//s;
    	return('ANY','') if s/^("|')\1//s;
    	return('ANY',$1) if s/^(.)//;
    }
}

sub parse {
    my $self=shift;
    my $data=shift;
    for ($data){
	$self->YYData->{INPUT} = $_
    }
    $self->YYParse( yylex => \&_lexer, yyerror => \&_error );
}

=head1 AUTHOR

Andreas Maier, E<lt>email@addressE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2010-2011 by Andreas Maier

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.1 or,
at your option, any later version of Perl 5 you may have available.

=cut
