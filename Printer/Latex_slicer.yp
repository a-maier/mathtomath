/* Grammar for line breaks in LaTeX */
#TODO:
#       -honouring option values
#       -keep count of \left and \right
#       -alignment
%{
use Data::Dump;
use feature qw(say);
#add hashes
sub add{
    my @hashes=@_;
    my %res=(string => '', length => 0, num_left=>0);
    foreach my $hash (@hashes){
    	    $res{string}.=$hash->{string};
    	    $res{length}+=$hash->{length};
	    $res{num_left}+=$hash->{num_left} if defined $hash->{num_left};
	    };
    return \%res;
};
%}

%token BEGMATRIX	#begin matrix environment
%token ENDMATRIX	#end matrix environment
%token LEFT		#\left
%token RIGHT		#\right
%token SEPARATOR 	# where we are allowed to break lines
%token ANY 		# basically the whole rest

%left ENDROW 		#end a matrix row
%nonassoc SUB # '^' '_' 
%left FRAC

%%

input: /* empty */
       | expression	{$_[1]->{string}} #just return the string portion
       | separator	{$_[1]->{string}} #just return the string portion
;

expression: term
	    |expression term		{add($_[1],$_[2])}
	    |expression left		{add($_[1],$_[2])}
	    |expression right		{add($_[1],$_[2])}
	    | expression separator	{
	      		 		if($_[1]->{length}>$_[0]->{line_length}){
						#insert line break
						#make sure that all \lefts are closed
						$_[1]->{string}.=('\right.' x $_[1]->{num_left}) 
							if defined $_[1]->{num_left};
						#line break
						$_[1]->{string}.="$_[0]->{line_break}\n";
						$_[1]->{length}=0;
						$_[1]->{string}.=('\left.' x $_[1]->{num_left}) 
							if defined $_[1]->{num_left};
						}
	      		 		add($_[1],$_[2])
			 		}
	    
;


term: ANY				{
      					my %hash=(string=>$_[1],length=> length $_[1]);
					\%hash
					}
      |  FRAC '{' arg '}' '{' arg '}'	{
      	      	      	      	  	my %hash;
					$hash{length}=($_[3]->{length}>$_[6]->{length})?$_[3]->{length}:$_[6]->{length};
					$hash{string}="$_[1]$_[2]$_[3]->{string}$_[4]$_[5]$_[6]->{string}$_[7]";
					\%hash
      	      	      	      	  	}
      |  SUB '{' arg '}'		{
      	      	      	      	  	my %hash;
					$hash{length}=$_[0]->{subscript_size}*$_[3]->{length};
					$hash{string}="$_[1]$_[2]$_[3]->{string}$_[4]";
					\%hash
      	      	      	      	  	}
      | BEGMATRIX matrixarg ENDMATRIX		{
      	      	      	      	  	my %hash;
					$hash{length}=$_[2]->{length};
					$hash{string}="$_[1]$_[2]->{string}$_[3]";
					\%hash
      	      	      	      	  	}

;

matrixarg: arg
          |matrixarg ENDROW matrixarg	{
      	       	      	   		my %hash;
 	  				$hash{length}=($_[1]->{length}>$_[3]->{length})?$_[1]->{length}:$_[3]->{length};
 	  				$hash{string}="$_[1]->{string}$_[2]$_[3]->{string}";
 	  				\%hash
 	  				}
;


arg: term
     |separator
     |arg term		{add($_[1],$_[2])}
     |arg separator	{add($_[1],$_[2])}
     |arg left		{add($_[1],$_[2])}
     |arg right		{add($_[1],$_[2])}
;

separator: SEPARATOR	{
      			my %hash=(string=>$_[1],length=> length $_[1]);
			\%hash
			}
;

left: LEFT	{
    		my %hash=(string=>$_[1],length=> 0,num_left=>1);
		\%hash
      		}
;

right: RIGHT	{
    		my %hash=(string=>$_[1],length=> 0,num_left=>-1);
		\%hash
      		}
;
%%

sub _error {
    if(exists $_[0]->YYData->{ERRMSG}) {
	print $_[0]->YYData->{ERRMSG};
        delete $_[0]->YYData->{ERRMSG};
        return;
    };
}

sub _lexer {
    my $parser =shift;
    
    return('',undef) unless $parser->YYData->{INPUT};
    for ($parser->YYData->{INPUT}) {
    	return('FRAC',$1) if s/^(\\frac)//;
	return('SEPARATOR',$1) if s/^($parser->{line_break_at})//;
	return('SUB',$1) if s/^([\^_])//;
	return($1,$1) if s/^([\{\}])//;
	return('BEGMATRIX',$1) if s/^(\\begin\{(array|tabular|(p|b|B|v|V|small)?matrix)\}(\{[lcr]*\})?)//;
	return('ENDMATRIX',$1) if s/^(\\end\{(array|tabular|(p|b|B|v|V|small)?matrix)\})//;
	return('LEFT',$1) if s/^(\\left)//;
	return('RIGHT',$1) if s/^(\\right)//;
	return('ENDROW',$1) if(s/^(\\\\)//);
        return('ANY',$1) if s/^(.)//s;
    }
}

sub parse {
    my $self=shift;
    my $data=shift;
    for ($data){
	$self->YYData->{INPUT} = $_
    }
    $self->YYParse( yylex => \&_lexer, yyerror => \&_error );
}

sub init{
    my $self=shift;
    my $args=shift;
    foreach my $property ('subscript_size','line_length','line_break','line_break_at'){
    	    $args->{$property} // die "Failed to insert line breaks: option $property not set";
    	    $self->{$property}=$args->{$property};
    }
}
