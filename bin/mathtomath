#!/usr/bin/perl

=head1 NAME

mathtomath - Convert mathematical expressions between different formats

=head1 SYNOPSIS

B<mathtomath> [options] [input files]

=head1 DESCRIPTION

B<mathtomath> reads mathematical expressions from the input files
(or from STDIN if no files are specified) and displays the
corresponding expressions in one or more custom formats. 

Usually you will want to specify at least one output format
with the B<L</-outformat>> option - if you don't a default
output format will be chosen. It is also recommended (although
not mandatory) to specify the format of the input expressions
with the B<L</-informat>> option.

=cut

use 5.10.1;
use warnings;
use strict;
use Math::ToMath qw(:all);
use Data::Dump;
use Getopt::Long;
use Pod::Usage;
use Math::ToMath::Options;
use File::Path qw(make_path);
use File::HomeDir;
use IO::Interactive qw(interactive);

my $version;

my $help;
my $tree;

my $quiet;
my $verbose;
my $strict;

my $in_format;
my @out_formats;
my $expression;
my $cl_option_str;
my $cl_local_rule_str;
my $cl_global_rule_str;
my %cl_options;
my %cl_local_rules;
my %cl_global_rules;

=head1 OPTIONS

=over 2

=item B<-?>, B<-help>        

Display a help message and exit

=item B<-expression>, B<-e> I<expression> 

Use I<expression> as input expression instead of reading from
input files or standard input.

=item B<-informat>, B<-if> I<format> 

Specify the format of the input expressions. The currently supported
formats are B<FORM>, B<LaTeX>, B<Mathematica> and a default format
(B<generic>). Format names are case-insensitive. If no input format is
specified, B<mathtomath> will try all available formats in a random
order. This can lead to ambiguities (have a look at the L</EXAMPLES> section).

=item B<-outformat>, B<-of> I<outformat1[,outformat2,...]> 

Specify one or more formats to which the input expressions
will be converted. The currently supported formats are
B<FORM>, B<LaTeX>, B<Mathematica> and a default format
(B<generic>). Format names are case-insensitive.

=item B<-o>, B<-options> I<option1=value1[,option2=value2,...]>

Specify options for the formatting of the output. The supported options
depend on the chosen output formats. See B<mathtomath-I<format>-options>
for a list of all options and their default values for a specific format.

Option values can also be changed permanently in the configuration files
.mathtomath/I<format>/global_rules, where .mathtomath should be in your
home directory.

=item B<-quiet>

Suppress output messages.

=item B<-rules, -r> I<before=E<gt>after[,before2=E<gt>after2,...]>

Apply replacement rules to the output. Each occurrence of I<before> will
be replaced by I<after>. The replacement uses regular expressions. If
you are not familiar with those (or their perl variant) you may want to
consult the L<perl regular expressions tutorial|perlretut>. 

You can define permanent replacement rules for a specific format in the
file .mathtomath/I<format>/global_rules, where .mathtomath should be in
your home directory.

=begin comment

=item B<-strict>

B<TODO> Fail if there are ambiguities in the conversion. This
is actually quite common and without this option I<mathtomath>
will still try do construct a somewhat sensible output expression.

=end comment

=item B<-verbose>

Explain what is happening.

=item B<-version>

Display version number and exit.

=back

=cut

GetOptions( 'informat|if=s' => \$in_format,
	    'outformats|of=s' => \@out_formats,
	    'expression|e=s' => \$expression,
	    'options|o=s' => \$cl_option_str,
	    'rules|global_rules=s' => \$cl_global_rule_str,
	    'local_rules=s' => \$cl_local_rule_str,
	    'strict!' => \$strict,
	    'quiet!' => \$quiet,
	    'verbose!'=> \$verbose,
	    'h|help|?'=> \$help,
	    'version'=> \$version
    );

if($version){
    say 'mathtomath version ' . Math::ToMath->VERSION;
    exit;
}

if ($help) {
    pod2usage(-verbose => 1);
}

if($cl_option_str){
    my $parser=Math::ToMath::Options->new();
    %cl_options = %{$parser->parse($cl_option_str)};
}

if($cl_global_rule_str){
    my $parser=Math::ToMath::Options->new();
    %cl_global_rules = %{$parser->parse($cl_global_rule_str)};
}

if($cl_local_rule_str){
    my $parser=Math::ToMath::Options->new();
    %cl_local_rules = %{$parser->parse($cl_local_rule_str)};
}

@out_formats = ('Generic') unless @out_formats;
@out_formats = map ucfirst(lc($_)),
               map {split /,/, $_} @out_formats;

$in_format=ucfirst lc $in_format if $in_format;

# we decide on our formats at run time,
# so we require require and don't use use?
foreach my $out_format (@out_formats){
   my $module = "Math::ToMath::Printer::$out_format";
   eval "require $module;" or die "Failed to load printer for $out_format";
}

if(!defined $expression){
    #give a hint if we're reading from a terminal
    if( !@ARGV && !$quiet ){
	say {interactive} "Please enter an expression "
	    ,"(finish with <Enter><Ctrl-d>):";
    }
    local $/=undef;
    $expression=<>;
}

exit if $expression =~ /^\s*$/;

#parse syntax tree
if($in_format){
    my $parser_class = Parser->get_parser($in_format);
    my $parser=$parser_class->new;
    say "Parsing $in_format expression" if $verbose;
    $tree=$parser->parse($expression) or die "Failed to parse expression:\n   $parser->{error_desc}";
}
else{
    #no input format is given, try all possibilities
    say "Trying to guess input format" if $verbose;
    my @parser_classes = Parser->get_parsers();
    foreach my $parser_class (@parser_classes){
	my $parser=$parser_class->new;
        my $in_format = $parser_class;
        $in_format =~ s/^Math::ToMath::Parser:://;
	#as soon as we can parse the input successfully in one format
	# we claim to have won
	if ($tree=$parser->parse($expression)) {
	    say "Input format: $in_format" if $verbose;
	    last;
	}
    }
    $tree or die "No suitable input format found for expression"
}

#create output in the desired format
foreach my $out_format (@out_formats){
    #dd $tree;
    my $printer=gen_printer
	(
	 $out_format
	 ,options => \%cl_options
	 ,global_rules => \%cl_global_rules
	 ,local_rules => \%cl_local_rules
	);
    say "Output format: ",$printer->format unless $quiet;
    say $printer->convert($tree);
}


#get options or rules for the given format from the corresponding configuration file
sub get_format_config{
    my $format=shift;
    my $type=shift;
    my $parser=Math::ToMath::Options->new();
    my $path=File::HomeDir->my_home."/.mathtomath/$format/";
    if(-e "$path$type"){
	open(my $in,'<',"$path$type") or die "Failed to open $path$type: $!";
	local $/;
	my $options=$parser->parse(<$in>);
	$options // die "Failed to parse $path$type for format $format";
	close $in;
	return %$options;
    }
    #configuration file does not exists, try to create it
    my $printer_class="Math::ToMath::Printer::$format";
    my $default_printer=$printer_class->new;
    my %option_values=$default_printer->$type();
    say "Creating configuration file $path$type";
    make_path($path);
    open(my $out,'>',"$path$type") or die "Failed to create $path$type: $!";
    for my $option (keys %option_values){
	say $out "$option = \"$option_values{$option}\";";
    }
    close $out;
    return ();
}

#generate a printer of the given class and set options and rules according to
# configuration files and command line options
sub gen_printer{
    my $format=shift;
    my $printer_class = "Math::ToMath::Printer::$format";
    my $printer=$printer_class->new;
    my %override=@_;
    #default options/rules from configuration files
    my %options=get_format_config($format,"options");
    my %local_rules=get_format_config($format,"local_rules");
    my %global_rules=get_format_config($format,"global_rules");
    
    #additional options/rules (e.g. from command line)
    @options{keys %{$override{options}}}=values %{$override{options}};
    @local_rules{keys %{$override{local_rules}}}=values %{$override{local_rules}};
    @global_rules{keys %{$override{global_rules}}}=values %{$override{global_rules}};

    $printer->options(%options);
    $printer->local_rules(%local_rules);
    $printer->global_rules(%global_rules);

    return $printer;
}

=head1 EXAMPLES

Convert the formula for the area of a circle from B<Mathematica> convention
to B<LaTeX>:

  mathtomath -if Mathematica -of LaTeX -e 'Pi*r^2'  # gives \pi\*r^2

Not specifying an input format can lead to undefined results:

  mathtomath -e 'v.v^2'   # is this (v.v)^2 or v.(v^2)?

This reads expressions from a file and adds line breaks after
approximately 40 characters to the B<LaTeX> output:

  mathtomath -if Mathematica -of LaTeX -o 'line_length=40' file_with_long_expressions

I like pi:

 mathtomath -if LaTeX -of Mathematica -e '\sin(x)\equiv0' -rules='x=>Pi'   # gives Sin[Pi]==0


=head1 FILES

=over 2

=item B<.mathtomath> Directory containing configuration files

=back

=begin comment

=head1 BUGS

Too many to list. Please report bugs to B<TODO>.

=end comment

=head1 SEE ALSO

=over 2

=item L<mathtomath-generic-options>

=item L<mathtomath-FORM-options>

=item L<mathtomath-Mathematica-options>

=item L<mathtomath-LaTeX-options>

=item L<Math::ToMath>

=item L<The github repository|https://github.com/a-maier/mathtomath>

=back

=head1 AUTHOR

Andreas Maier, E<lt>email@addressE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2010-2011 by Andreas Maier

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.1 or,
at your option, any later version of Perl 5 you may have available.


=cut

